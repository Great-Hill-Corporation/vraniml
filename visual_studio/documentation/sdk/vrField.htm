<html><head><title>vrField Documentation</title></head>
<body BACKGROUND="sumtextb.jpg" BGCOLOR="#FFFFFF"><h1>
<a name="topofdoc"><img src="logo.gif" WIDTH="75" HEIGHT="75">vrField</a></h1>
<dl>
<dd>
	The vrField class represents information about the fields that make up
	a <a href="vrRuntimeClass.htm">vrRuntimeClass</a>.  Each node stores static information about itself by
	including a pointer to a <a href="vrRuntimeClass.htm">vrRuntimeClass</a> for that node type.

</dl>
<hr><p></p>
<p><strong>[ 
<a href="../../Documentation/utility.htm">Utility</a> | <a href="../../Documentation/solids.htm">Solid</a> | <a href="../../Documentation/noderef.htm">VRML97</a> ]<br>[  
<a href="vrfield.htm#aag">Summary</a> | </a>
<a href="vrfield.htm#DESCRIPTION">Description</a> | 
<a href="vrfield.htm#NOTES">Notes</a> | 
<a href="vrfield.htm#EXAMPLE_CODE">Example Code</a> | 
<a href="vrfield.htm#MEMBERS">Members</a> | 
<a href="vrfield.htm#parents">Ancestors</a> | <a href="vrfield.htm#children">Descendants</a>  ]</strong><p>
<a name="aag"><hr><p></p></a><h2><i>Summary</i></h2>
class UL_Interface vrField<br>
<br>
 {
<br>
<table>
<tr><td align="left"><font size="+1"><i><b>public:</b></i></font>
</td></tr>
<tr><td align="right" valign="top">typedef enum </td><td><a href="vrField.htm#typedef_enum_vrEventType$">vrEventType</a>;</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrField.htm#vrField_(void)$">vrField</a> (void);</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrField.htm#vrField_(const_vrField&amp;_field)$">vrField</a> (const vrField&amp; field);</td></tr>
<tr><td align="right" valign="top"></td><td>~<a href="vrField.htm#~vrField_(void)$">vrField</a> (void);</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrField.htm#vrField_(const_SFString&amp;_fieldName,_SFInt32_dataType,_vrEventType_eventType_,_SFInt32_fieldID_,_void_*def_)$">vrField</a> (const <a href="SFString.htm">SFString</a>&amp; fieldName, SFInt32 dataType, vrEventType eventType , SFInt32 fieldID , void *def );</td></tr>
<tr><td align="right" valign="top">vrField&amp; </td><td><a href="vrField.htm#vrField&amp;_operator$_(const_vrField&amp;_field)$">operator=</a> (const vrField&amp; field);</td></tr>
<tr><td align="right" valign="top"><a href="SFString.htm">SFString</a> </td><td><a href="vrField.htm#SFString_GetName_(void)_const$">GetName</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFInt32">SFInt32 </a> </td><td><a href="vrField.htm#SFInt32_GetType_(void)_const$">GetType</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFInt32">SFInt32 </a> </td><td><a href="vrField.htm#SFInt32_GetEventType_(void)_const$">GetEventType</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFInt32">SFInt32 </a> </td><td><a href="vrField.htm#SFInt32_GetID_(void)_const$">GetID</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrField.htm#SFBool_IsEventType(vrEventType_eventType)_const$">IsEventType</a>(vrEventType eventType) const;</td></tr>
<tr><td align="left"><font size="+1"><i><b>protected:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFInt32">SFInt32 </a> </td><td><a href="vrField.htm#SFInt32_m_ID$">m_ID</a>;</td></tr>
<tr><td align="right" valign="top">vrEventType </td><td><a href="vrField.htm#vrEventType_m_EventType$">m_EventType</a>;</td></tr>
<tr><td align="right" valign="top"><a href="SFString.htm">SFString</a> </td><td><a href="vrField.htm#SFString_m_Name$">m_Name</a>;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFInt32">SFInt32 </a> </td><td><a href="vrField.htm#SFInt32_m_Type$">m_Type</a>;</td></tr>
</table>
}; <p>
<a name="DESCRIPTION"><hr><p></p></a><h2><i>Description</i></h2>
	<ul>
	The vrField class stores information about a particular field in
	a <a href="vrRuntimeClass.htm">vrRuntimeClass</a>.  A vrField has data items for fieldType, fieldName, defaultValue 
	and a storage class or eventType.
	</ul>
<p>
<a name="NOTES"><hr><p></p></a><h2><i>Notes</i></h2>
	<ul>
	<li>The vrField class corresponds to the VRML concept of a field which
	are the components of all built-in nodes and Prototypes.</li>
	</ul>
<p>
<a name="EXAMPLE_CODE"><hr><p></p></a><h2><i>Example Code</i></h2>
	<pre>
	// None.
	</pre>
<p>
<a name="MEMBERS"><hr><p></p></a><h2><i>Members</i></h2>
<a name="typedef_enum_vrEventType$"><ul><h3><li>typedef enum vrEventType;</li></h3></a>
</ul>
</ul>     <dd>Enumeration for values assigned to m_EventType.
	   <dd>One of [ undefined=-1 | eventOut=1 | eventIn=2 | exposedField=3 | field=4 ]
<p>
<a name="SFInt32_m_ID$"><ul><h3><li>SFInt32 m_ID;</li></h3></a>
</ul>
</ul>     <dd>A unique id for this field.
<dl><dl>
<dt><i>default:</i><strong> 0</strong>
<p>
</dl></dl>
<a name="vrEventType_m_EventType$"><ul><h3><li>vrEventType m_EventType;</li></h3></a>
</ul>
</ul>     <dd>Type of event this field represents.
<dl><dl>
<dt><i>default:</i><strong> 0</strong>
<dt><i>values:</i><strong> [undefined|eventOut|eventIn|exposedField|field]</strong>
<p>
</dl></dl>
<a name="SFString_m_Name$"><ul><h3><li>SFString m_Name;</li></h3></a>
</ul>
</ul>     <dd>The name of this field.
<dl><dl>
<dt><i>default:</i><strong> NULL</strong>
<p>
</dl></dl>
<a name="SFInt32_m_Type$"><ul><h3><li>SFInt32 m_Type;</li></h3></a>
</ul>
</ul>     <dd>The type of this field.
<dl><dl>
<dt><i>default:</i><strong> NULL</strong>
<dt><i>values:</i><strong> [SFBool|SFInt32|SFFloat|<a href="SFVec2f.htm">SFVec2f</a>|<a href="SFVec3f.htm">SFVec3f</a>|...|MFInt32|MFFloat|...etc...]</strong>
<p>
</dl></dl>
<a name="vrField_(void)$"><ul><h3><li>vrField (void);</li></h3></a>
</ul>
</ul>     <dd>Default constructor.
<p>
<a name="vrField_(const_vrField&amp;_field)$"><ul><h3><li>vrField (const vrField&amp; field);</li></h3></a>
</ul>
</ul>     <dd>Copy constructor.
<p>
<a name="~vrField_(void)$"><ul><h3><li>~vrField (void);</li></h3></a>
</ul>
</ul>     <dd>Destructor.
<p>
<a name="vrField_(const_SFString&amp;_fieldName,_SFInt32_dataType,_vrEventType_eventType_,_SFInt32_fieldID_,_void_*def_)$"><ul><h3><li>vrField (const SFString&amp; fieldName, SFInt32 dataType, vrEventType eventType , SFInt32 fieldID , void *def );</li></h3></a>
</ul>
</ul>     <dd>Constructor.
<p>
<dl><dl>
<dt><i>in</i><strong> fieldName:</strong>
<dd>The name of this field (may be NULL).
<dt><i>in</i><strong> dataType:</strong>
<dd>The data type of this field.
<dt><i>in</i><strong> eventType:</strong>
<dd>The event type of this field.
<dt><i>in</i><strong> fieldID:</strong>
<dd>The unique id of this field.
<p>
</dl></dl>
<a name="vrField&amp;_operator$_(const_vrField&amp;_field)$"><ul><h3><li>vrField&amp; operator= (const vrField&amp; field);</li></h3></a>
</ul>
</ul>     <dd>Equals operator.
<p>
<a name="SFString_GetName_(void)_const$"><ul><h3><li>SFString GetName (void) const;</li></h3></a>
</ul>
</ul>     <dd>Return the field name.
<p>
<a name="SFInt32_GetType_(void)_const$"><ul><h3><li>SFInt32 GetType (void) const;</li></h3></a>
</ul>
</ul>     <dd>Return the field type.
<p>
<a name="SFInt32_GetEventType_(void)_const$"><ul><h3><li>SFInt32 GetEventType (void) const;</li></h3></a>
</ul>
</ul>     <dd>Return the field event type.
<p>
<a name="SFInt32_GetID_(void)_const$"><ul><h3><li>SFInt32 GetID (void) const;</li></h3></a>
</ul>
</ul>     <dd>Return the field id.
<p>
<a name="SFBool_IsEventType(vrEventType_eventType)_const$"><ul><h3><li>SFBool IsEventType(vrEventType eventType) const;</li></h3></a>
</ul>
</ul>     <dd>Returns TRUE is this field has the given event type.
<p>
<dl><dl>
<dt><i>in</i><strong> eventType:</strong>
<dd>The event type to query.
<p>
</dl></dl>
<a name="parents"><hr><p></p></a>
<h2><i>Ancestors</i></h2>
<ul>
No ancestors.<p>
</ul>
<a name="children"><hr><p></p></a>
<h2><i>Descendants</i></h2>
<ul>
No descendants.<p>
</ul>
<hr><p></p>
Generated from source by the <i><a href="http://www.cs.umn.edu/~kotula/cocoon/cocoon.htm">Cocoon</a></i> utilities on Mon Feb 01 22:20:59 1999
.<p>
</body></html>
