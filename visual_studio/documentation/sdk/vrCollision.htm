<html><head><title>vrCollision Documentation</title></head>
<body BACKGROUND="sumtextb.jpg" BGCOLOR="#FFFFFF"><h1>
<a name="topofdoc"><img src="logo.gif" WIDTH="75" HEIGHT="75">vrCollision</a></h1>
<dl>
<dd>
	This class corresponds to the Collision node in VRML.  
	<a href="../spec/part1/nodesRef.html#Collision">Further information</a> 
	about this class is available in any VRML related documentation.

</dl>
<hr><p></p>
<p><strong>[ 
<a href="../../Documentation/utility.htm">Utility</a> | <a href="../../Documentation/solids.htm">Solid</a> | <a href="../../Documentation/noderef.htm">VRML97</a> ]<br>[  
<a href="vrcollision.htm#aag">Summary</a> | </a>
<a href="vrcollision.htm#DESCRIPTION">Description</a> | 
<a href="vrcollision.htm#NOTES">Notes</a> | 
<a href="vrcollision.htm#EXAMPLE_CODE">Example Code</a> | 
<a href="vrcollision.htm#MEMBERS">Members</a> | 
<a href="vrcollision.htm#parents">Ancestors</a> | <a href="vrcollision.htm#children">Descendants</a>  ]</strong><p>
<a name="aag"><hr><p></p></a><h2><i>Summary</i></h2>
class <spc> vrCollision : public <a href="vrGroupingNode.htm">vrGroupingNode</a><br>
<br>
 {
<br>
<table>
<tr><td align="left"><font size="+1"><i><b>public:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrCollision.htm#vrCollision(void)$">vrCollision</a>(void);</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrCollision.htm#vrCollision(const_vrCollision&amp;_v)$">vrCollision</a>(const vrCollision&amp; v);</td></tr>
<tr><td align="right" valign="top"></td><td>~<i><a href="vrCollision.htm#~vrCollision(void)$">vrCollision</a></i>(void);</td></tr>
<tr><td align="right" valign="top">vrCollision&amp; </td><td><a href="vrCollision.htm#vrCollision&amp;_operator$(const_vrCollision&amp;_v)$">operator=</a>(const vrCollision&amp; v);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFNode">SFNode </a> </td><td><i><a href="vrCollision.htm#SFNode_Clone(void)_const$">Clone</a></i>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrCollision.htm#void_SetProxy(const_SFNode_proxy)$">SetProxy</a>(const SFNode proxy);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFNode">SFNode </a> </td><td><a href="vrCollision.htm#SFNode_GetProxy(void)_const$">GetProxy</a>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrCollision.htm#void_SetCollide(SFBool_collide)$">SetCollide</a>(SFBool collide);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrCollision.htm#SFBool_GetCollide(void)_const$">GetCollide</a>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrCollision.htm#void_SetCollideTime(SFTime_collidetime)$">SetCollideTime</a>(SFTime collidetime);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFTime">SFTime </a> </td><td><a href="vrCollision.htm#SFTime_GetCollideTime(void)_const$">GetCollideTime</a>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrCollision.htm#void_Traverse(vrTraverser_*trav)_const$">Traverse</a></i>(<a href="vrTraverser.htm">vrTraverser</a> *trav) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrCollision.htm#void_ReceiveEventIn(vrEvent_*event)$">ReceiveEventIn</a></i>(<a href="vrEvent.htm">vrEvent</a> *event);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFNode">SFNode </a> </td><td><i><a href="vrCollision.htm#SFNode_FindByType(vrRuntimeClass_*pClass)_const$">FindByType</a></i>(<a href="vrRuntimeClass.htm">vrRuntimeClass</a> *pClass) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFNode">SFNode </a> </td><td><i><a href="vrCollision.htm#SFNode_FindByName(const_SFString&amp;_nodeName)_const$">FindByName</a></i>(const <a href="SFString.htm">SFString</a>&amp; nodeName) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><i><a href="vrCollision.htm#SFBool_ForEvery(PFBO3V_userFn,_void_*userData,_PFBO3V_afterFn_)$">ForEvery</a></i>(PFBO3V userFn, void *userData, PFBO3V afterFn );</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><i><a href="vrCollision.htm#SFBool_IsDefault(const_SFString&amp;_fieldName_,_vrField_*field_)_const$">IsDefault</a></i>(const <a href="SFString.htm">SFString</a>&amp; fieldName , <a href="vrField.htm">vrField</a> *field ) const;</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrCollision.htm#DECLARE_NODE(vrCollision)$">DECLARE_NODE</a>(vrCollision);</td></tr>
<tr><td align="left"><font size="+1"><i><b>protected:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFNode">SFNode </a> </td><td><a href="vrCollision.htm#SFNode_m_Proxy$">m_Proxy</a>;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrCollision.htm#SFBool_m_Collide$">m_Collide</a>;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFTime">SFTime </a> </td><td><a href="vrCollision.htm#SFTime_m_CollideTime$">m_CollideTime</a>;</td></tr>
</table>
}; <p>
<a name="DESCRIPTION"><hr><p></p></a><h2><i>Description</i></h2>
	<ul>This node corresponds to the Collision node as defined in the VRML97 
	specification.  Like all Node Classes this class is better described in the 
	<a href="../spec/index.html">VRML97 Specification</a>.  In particular, at this 
	<a href="../spec/part1/nodesRef.html#Collision">link</a>.</ul>
<p>
<a name="NOTES"><hr><p></p></a><h2><i>Notes</i></h2>
	<ul>
	<li>All node classes share certain aspects which are described <a href="../nodespec.htm">here</a>.</li>
	</ul>
<p>
<a name="EXAMPLE_CODE"><hr><p></p></a><h2><i>Example Code</i></h2>
	<pre>
	// None.
	</pre>
<p>
<a name="MEMBERS"><hr><p></p></a><h2><i>Members</i></h2>
<a name="SFNode_m_Proxy$"><ul><h3><li>SFNode m_Proxy;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'proxy' field.
<p>
<dl><dl>
<dt><i>default</i><strong> NULL</strong>
<p>
</dl></dl>
<a name="SFBool_m_Collide$"><ul><h3><li>SFBool m_Collide;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'collide' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> TRUE</strong>
<p>
</dl></dl>
<a name="SFTime_m_CollideTime$"><ul><h3><li>SFTime m_CollideTime;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'collideTime' eventOut.
<p>
<dl><dl>
<dt><i>default</i><strong> 0.0</strong>
<p>
</dl></dl>
<a name="vrCollision(void)$"><ul><h3><li>vrCollision(void);</li></h3></a>
</ul>
</ul>	   <dd>Default constructor.
<p>
<a name="vrCollision(const_vrCollision&amp;_v)$"><ul><h3><li>vrCollision(const vrCollision&amp; v);</li></h3></a>
</ul>
</ul>	   <dd>Copy constructor.
<p>
<a name="~vrCollision(void)$"><ul><h3><li>~vrCollision(void);</li></h3></a>
</ul>
</ul>	   <dd>Destructor.
<p>
<a name="vrCollision&amp;_operator$(const_vrCollision&amp;_v)$"><ul><h3><li>vrCollision&amp; operator=(const vrCollision&amp; v);</li></h3></a>
</ul>
</ul>	   <dd>Equals operator.
<p>
<a name="SFNode_Clone(void)_const$"><ul><h3><li>SFNode Clone(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns an exact copy of the given node.
<p>
<a name="void_SetProxy(const_SFNode_proxy)$"><ul><h3><li>void SetProxy(const SFNode proxy);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_Proxy member.
<p>
<dl><dl>
<dt><i>in</i><strong> proxy:</strong>
<dd>The proxy value.
<p>
</dl></dl>
<a name="SFNode_GetProxy(void)_const$"><ul><h3><li>SFNode GetProxy(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_Proxy member.
<p>
<a name="void_SetCollide(SFBool_collide)$"><ul><h3><li>void SetCollide(SFBool collide);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_Collide member.
<p>
<dl><dl>
<dt><i>in</i><strong> collide:</strong>
<dd>The collide value.
<p>
</dl></dl>
<a name="SFBool_GetCollide(void)_const$"><ul><h3><li>SFBool GetCollide(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_Collide member.
<p>
<a name="void_SetCollideTime(SFTime_collidetime)$"><ul><h3><li>void SetCollideTime(SFTime collidetime);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_CollideTime member.
<p>
<dl><dl>
<dt><i>in</i><strong> collidetime:</strong>
<dd>The collidetime value.
<p>
</dl></dl>
<a name="SFTime_GetCollideTime(void)_const$"><ul><h3><li>SFTime GetCollideTime(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_CollideTime member.
<p>
<a name="void_Traverse(vrTraverser_*trav)_const$"><ul><h3><li>void Traverse(vrTraverser *trav) const;</li></h3></a>
</ul>
</ul>	   <dd>Respond to a traversal by an arbitrary traverser.  Note: Normally, nodes just call t-&gt;<a href="vrcollision.htm#void_Traverse(vrTraverser_*trav)_const$">Traverse</a>(this)
	   <dd>to have the traverser handle the traversal.  you may override this method in your derived class to
	   <dd>handle traversals of node types.
<p>
<dl><dl>
<dt><i>in</i><strong> trav:</strong>
<dd>The <a href="vrTraverser.htm">vrTraverser</a> requesting the traversal.
<p>
</dl></dl>
<a name="void_ReceiveEventIn(vrEvent_*event)$"><ul><h3><li>void ReceiveEventIn(vrEvent *event);</li></h3></a>
</ul>
</ul>	   <dd>Receive an event during an event cascade or directly from caller.
<p>
<dl><dl>
<dt><i>in</i><strong> event:</strong>
<dd>The <a href="vrEvent.htm">vrEvent</a> to be processed.
<p>
</dl></dl>
<a name="SFNode_FindByType(vrRuntimeClass_*pClass)_const$"><ul><h3><li>SFNode FindByType(vrRuntimeClass *pClass) const;</li></h3></a>
</ul>
</ul>	   <dd>Find a node by class type.  Returns NULL if not found. (Overridden to search <a href="vrNode.htm">vrNode</a> derived data members).
<p>
<dl><dl>
<dt><i>in</i><strong> pClass:</strong>
<dd>Pointer to a <a href="vrRuntimeClass.htm">vrRuntimeClass</a> representing the searched for type.
<p>
</dl></dl>
<a name="SFNode_FindByName(const_SFString&amp;_nodeName)_const$"><ul><h3><li>SFNode FindByName(const SFString&amp; nodeName) const;</li></h3></a>
</ul>
</ul>	   <dd>Find a node by name.  Returns NULL if not found.  (Overridden to search <a href="vrNode.htm">vrNode</a> derived data members)
<p>
<dl><dl>
<dt><i>in</i><strong> nodeName:</strong>
<dd>The name of the node being searched for.
<p>
</dl></dl>
<a name="SFBool_ForEvery(PFBO3V_userFn,_void_*userData,_PFBO3V_afterFn_)$"><ul><h3><li>SFBool ForEvery(PFBO3V userFn, void *userData, PFBO3V afterFn );</li></h3></a>
</ul>
</ul>	   <dd>Apply 'userFn' to all contained nodes (including any children and/or direct references).  [ <a href="../forevery.htm">Additional information.</a> ]
<p>
<dl><dl>
<dt><i>in</i><strong> userFn:</strong>
<dd>Pointer to a function returning SFBool and taking an SFNode and void pointer as arguments.  'userFn' is applied to this node and all children (if any).
<dt><i>in</i><strong> userData:</strong>
<dd>Pointer to arbitrary user data.
<dt><i>in</i><strong> afterFn:</strong>
<dd>Pointer to a function to apply after applying 'userFn' to all children (for example: popping a stack).
<p>
</dl></dl>
<a name="SFBool_IsDefault(const_SFString&amp;_fieldName_,_vrField_*field_)_const$"><ul><h3><li>SFBool IsDefault(const SFString&amp; fieldName , vrField *field ) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns TRUE if the node (or a particular field) is in it's default state.
<p>
<dl><dl>
<dt><i>in</i><strong> fieldName:</strong>
<dd>The field to check for default value.  NULL implies check all fields of this node.
<dt><i>out</i><strong> field:</strong>
<dd>If non-NULL the value of the field will be returned in field.
<p>
</dl></dl>
<a name="DECLARE_NODE(vrCollision)$"><ul><h3><li>DECLARE_NODE(vrCollision);</li></h3></a>
</ul>
</ul>	   <dd>Declare that this node may be runtime typed and dynamically created. [ <a href="../../Documentation/define.htm#DECLARE_NODE">DECLARE_NODE</a> ]
<p>
<a name="parents"><hr><p></p></a>
<h2><i>Ancestors</i></h2>
<ul>
Inheritance chain for vrCollision:<p>
<ul>
<li><a href="vrBaseNode.htm">vrBaseNode</a>
<li><a href="vrNode.htm">vrNode</a>
<li><a href="vrGroupingNode.htm">vrGroupingNode</a>
</ul>
</ul>
<a name="children"><hr><p></p></a>
<h2><i>Descendants</i></h2>
<ul>
No descendants.<p>
</ul>
<hr><p></p>
Generated from source by the <i><a href="http://www.cs.umn.edu/~kotula/cocoon/cocoon.htm">Cocoon</a></i> utilities on Mon Feb 01 22:20:50 1999
.<p>
</body></html>
