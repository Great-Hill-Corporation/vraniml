<html><head><title>vrExtrusion Documentation</title></head>
<body BACKGROUND="sumtextb.jpg" BGCOLOR="#FFFFFF"><h1>
<a name="topofdoc"><img src="logo.gif" WIDTH="75" HEIGHT="75">vrExtrusion</a></h1>
<dl>
<dd>
	This class corresponds to the Extrusion node in VRML.  
	<a href="../spec/part1/nodesRef.html#Extrusion">Further information</a> 
	about this class is available in any VRML related documentation.

</dl>
<hr><p></p>
<p><strong>[ 
<a href="../../Documentation/utility.htm">Utility</a> | <a href="../../Documentation/solids.htm">Solid</a> | <a href="../../Documentation/noderef.htm">VRML97</a> ]<br>[  
<a href="vrextrusion.htm#aag">Summary</a> | </a>
<a href="vrextrusion.htm#DESCRIPTION">Description</a> | 
<a href="vrextrusion.htm#NOTES">Notes</a> | 
<a href="vrextrusion.htm#EXAMPLE_CODE">Example Code</a> | 
<a href="vrextrusion.htm#MEMBERS">Members</a> | 
<a href="vrextrusion.htm#parents">Ancestors</a> | <a href="vrextrusion.htm#children">Descendants</a>  ]</strong><p>
<a name="aag"><hr><p></p></a><h2><i>Summary</i></h2>
class <spc> vrExtrusion : public <a href="vrGeometryNode.htm">vrGeometryNode</a><br>
<br>
 {
<br>
<table>
<tr><td align="left"><font size="+1"><i><b>public:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrExtrusion.htm#vrExtrusion(void)$">vrExtrusion</a>(void);</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrExtrusion.htm#vrExtrusion(const_vrExtrusion&amp;_v)$">vrExtrusion</a>(const vrExtrusion&amp; v);</td></tr>
<tr><td align="right" valign="top"></td><td>~<i><a href="vrExtrusion.htm#~vrExtrusion(void)$">vrExtrusion</a></i>(void);</td></tr>
<tr><td align="right" valign="top">vrExtrusion&amp; </td><td><a href="vrExtrusion.htm#vrExtrusion&amp;_operator$(const_vrExtrusion&amp;_v)$">operator=</a>(const vrExtrusion&amp; v);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFNode">SFNode </a> </td><td><i><a href="vrExtrusion.htm#SFNode_Clone(void)_const$">Clone</a></i>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrExtrusion.htm#void_SetBeginCap(SFBool_begincap)$">SetBeginCap</a>(SFBool begincap);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrExtrusion.htm#void_SetEndCap(SFBool_endcap)$">SetEndCap</a>(SFBool endcap);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrExtrusion.htm#SFBool_GetBeginCap(void)_const$">GetBeginCap</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrExtrusion.htm#SFBool_GetEndCap(void)_const$">GetEndCap</a>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrExtrusion.htm#void_AddCrossSection(const_SFVec2f&amp;_crosssection)$">AddCrossSection</a>(const <a href="SFVec2f.htm">SFVec2f</a>&amp; crosssection);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrExtrusion.htm#void_SetCrossSection(const_MFVec2f&amp;_crosssection)$">SetCrossSection</a>(const MFVec2f&amp; crosssection);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrExtrusion.htm#void_AddOrientation(const_SFRotation&amp;_orientation)$">AddOrientation</a>(const <a href="SFRotation.htm">SFRotation</a>&amp; orientation);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrExtrusion.htm#void_SetOrientation(const_MFRotation&amp;_orientation)$">SetOrientation</a>(const MFRotation&amp; orientation);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrExtrusion.htm#void_AddScale(const_SFVec2f&amp;_scale)$">AddScale</a>(const <a href="SFVec2f.htm">SFVec2f</a>&amp; scale);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrExtrusion.htm#void_SetScale(const_MFVec2f&amp;_scale)$">SetScale</a>(const MFVec2f&amp; scale);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrExtrusion.htm#void_AddSpine(const_SFVec3f&amp;_spine)$">AddSpine</a>(const <a href="SFVec3f.htm">SFVec3f</a>&amp; spine);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrExtrusion.htm#void_SetSpine(const_MFVec3f&amp;_spine)$">SetSpine</a>(const MFVec3f&amp; spine);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFInt32">SFInt32 </a> </td><td><a href="vrExtrusion.htm#SFInt32_GetNCrossSections(void)_const$">GetNCrossSections</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="SFVec2f.htm">SFVec2f</a> </td><td><a href="vrExtrusion.htm#SFVec2f_GetCrossSection(SFInt32_n)_const$">GetCrossSection</a>(SFInt32 n) const;</td></tr>
<tr><td align="right" valign="top">const MFVec2f&amp; </td><td><a href="vrExtrusion.htm#const_MFVec2f&amp;_GetCrossSectionArray(void)_const$">GetCrossSectionArray</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFInt32">SFInt32 </a> </td><td><a href="vrExtrusion.htm#SFInt32_GetNOrientations(void)_const$">GetNOrientations</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="SFRotation.htm">SFRotation</a> </td><td><a href="vrExtrusion.htm#SFRotation_GetOrientation(SFInt32_n)_const$">GetOrientation</a>(SFInt32 n) const;</td></tr>
<tr><td align="right" valign="top">const MFRotation&amp; </td><td><a href="vrExtrusion.htm#const_MFRotation&amp;_GetOrientationArray(void)_const$">GetOrientationArray</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFInt32">SFInt32 </a> </td><td><a href="vrExtrusion.htm#SFInt32_GetNScales(void)_const$">GetNScales</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="SFVec2f.htm">SFVec2f</a> </td><td><a href="vrExtrusion.htm#SFVec2f_GetScale(SFInt32_n)_const$">GetScale</a>(SFInt32 n) const;</td></tr>
<tr><td align="right" valign="top">const MFVec2f&amp; </td><td><a href="vrExtrusion.htm#const_MFVec2f&amp;_GetScaleArray(void)_const$">GetScaleArray</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFInt32">SFInt32 </a> </td><td><a href="vrExtrusion.htm#SFInt32_GetNSpines(void)_const$">GetNSpines</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="SFVec3f.htm">SFVec3f</a> </td><td><a href="vrExtrusion.htm#SFVec3f_GetSpine(SFInt32_n)_const$">GetSpine</a>(SFInt32 n) const;</td></tr>
<tr><td align="right" valign="top">const MFVec3f&amp; </td><td><a href="vrExtrusion.htm#const_MFVec3f&amp;_GetSpineArray(void)_const$">GetSpineArray</a>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrExtrusion.htm#void_Traverse(vrTraverser_*trav)_const$">Traverse</a></i>(<a href="vrTraverser.htm">vrTraverser</a> *trav) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrExtrusion.htm#void_ReceiveEventIn(vrEvent_*event)$">ReceiveEventIn</a></i>(<a href="vrEvent.htm">vrEvent</a> *event);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><i><a href="vrExtrusion.htm#SFBool_IsDefault(const_SFString&amp;_fieldName_,_vrField_*field_)_const$">IsDefault</a></i>(const <a href="SFString.htm">SFString</a>&amp; fieldName , <a href="vrField.htm">vrField</a> *field ) const;</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrExtrusion.htm#DECLARE_NODE(vrExtrusion)$">DECLARE_NODE</a>(vrExtrusion);</td></tr>
<tr><td align="left"><font size="+1"><i><b>protected:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrExtrusion.htm#SFBool_m_BeginCap$">m_BeginCap</a>;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrExtrusion.htm#SFBool_m_EndCap$">m_EndCap</a>;</td></tr>
<tr><td align="right" valign="top">MFVec2f </td><td><a href="vrExtrusion.htm#MFVec2f_m_CrossSection$">m_CrossSection</a>;</td></tr>
<tr><td align="right" valign="top">MFRotation </td><td><a href="vrExtrusion.htm#MFRotation_m_Orientation$">m_Orientation</a>;</td></tr>
<tr><td align="right" valign="top">MFVec2f </td><td><a href="vrExtrusion.htm#MFVec2f_m_Scale$">m_Scale</a>;</td></tr>
<tr><td align="right" valign="top">MFVec3f </td><td><a href="vrExtrusion.htm#MFVec3f_m_Spine$">m_Spine</a>;</td></tr>
</table>
}; <p>
<a name="DESCRIPTION"><hr><p></p></a><h2><i>Description</i></h2>
	<ul>This node corresponds to the Extrusion node as defined in the VRML97 
	specification.  Like all Node Classes this class is better described in the 
	<a href="../spec/index.html">VRML97 Specification</a>.  In particular, at this 
	<a href="../spec/part1/nodesRef.html#Extrusion">link</a>.</ul>
<p>
<a name="NOTES"><hr><p></p></a><h2><i>Notes</i></h2>
	<ul>
	<li>All node classes share certain aspects which are described <a href="../nodespec.htm">here</a>.</li>
	</ul>
<p>
<a name="EXAMPLE_CODE"><hr><p></p></a><h2><i>Example Code</i></h2>
	<pre>
	// None.
	</pre>
<p>
<a name="MEMBERS"><hr><p></p></a><h2><i>Members</i></h2>
<a name="SFBool_m_BeginCap$"><ul><h3><li>SFBool m_BeginCap;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'beginCap' field.
<p>
<dl><dl>
<dt><i>default</i><strong> TRUE</strong>
<p>
</dl></dl>
<a name="SFBool_m_EndCap$"><ul><h3><li>SFBool m_EndCap;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'endCap' field.
<p>
<dl><dl>
<dt><i>default</i><strong> TRUE</strong>
<p>
</dl></dl>
<a name="MFVec2f_m_CrossSection$"><ul><h3><li>MFVec2f m_CrossSection;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'crossSection' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> <a href="SFVec2f.htm">SFVec2f</a>(1,1)</strong>
<p>
</dl></dl>
<a name="MFRotation_m_Orientation$"><ul><h3><li>MFRotation m_Orientation;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'orientation' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> defRotation</strong>
<p>
</dl></dl>
<a name="MFVec2f_m_Scale$"><ul><h3><li>MFVec2f m_Scale;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'scale' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> xy1</strong>
<p>
</dl></dl>
<a name="MFVec3f_m_Spine$"><ul><h3><li>MFVec3f m_Spine;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'spine' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> origin</strong>
<p>
</dl></dl>
<a name="vrExtrusion(void)$"><ul><h3><li>vrExtrusion(void);</li></h3></a>
</ul>
</ul>	   <dd>Default constructor.
<p>
<a name="vrExtrusion(const_vrExtrusion&amp;_v)$"><ul><h3><li>vrExtrusion(const vrExtrusion&amp; v);</li></h3></a>
</ul>
</ul>	   <dd>Copy constructor.
<p>
<a name="~vrExtrusion(void)$"><ul><h3><li>~vrExtrusion(void);</li></h3></a>
</ul>
</ul>	   <dd>Destructor.
<p>
<a name="vrExtrusion&amp;_operator$(const_vrExtrusion&amp;_v)$"><ul><h3><li>vrExtrusion&amp; operator=(const vrExtrusion&amp; v);</li></h3></a>
</ul>
</ul>	   <dd>Equals operator.
<p>
<a name="SFNode_Clone(void)_const$"><ul><h3><li>SFNode Clone(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns an exact copy of the given node.
<p>
<a name="void_SetBeginCap(SFBool_begincap)$"><ul><h3><li>void SetBeginCap(SFBool begincap);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_BeginCap member.
<p>
<dl><dl>
<dt><i>in</i><strong> begincap:</strong>
<dd>The begincap value.
<p>
</dl></dl>
<a name="void_SetEndCap(SFBool_endcap)$"><ul><h3><li>void SetEndCap(SFBool endcap);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_EndCap member.
<p>
<dl><dl>
<dt><i>in</i><strong> endcap:</strong>
<dd>The endcap value.
<p>
</dl></dl>
<a name="SFBool_GetBeginCap(void)_const$"><ul><h3><li>SFBool GetBeginCap(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_BeginCap member.
<p>
<a name="SFBool_GetEndCap(void)_const$"><ul><h3><li>SFBool GetEndCap(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_EndCap member.
<p>
<a name="void_AddCrossSection(const_SFVec2f&amp;_crosssection)$"><ul><h3><li>void AddCrossSection(const SFVec2f&amp; crosssection);</li></h3></a>
</ul>
</ul>	   <dd>Add an item to the m_CrossSection array (grow if needed).
<p>
<dl><dl>
<dt><i>in</i><strong> crosssection:</strong>
<dd>The value to add to the m_CrossSection array.
<p>
</dl></dl>
<a name="void_SetCrossSection(const_MFVec2f&amp;_crosssection)$"><ul><h3><li>void SetCrossSection(const MFVec2f&amp; crosssection);</li></h3></a>
</ul>
</ul>	   <dd>Replace the values of the m_CrossSection member (copies values).
<p>
<dl><dl>
<dt><i>in</i><strong> crosssection:</strong>
<dd>The m_CrossSection array.
<p>
</dl></dl>
<a name="void_AddOrientation(const_SFRotation&amp;_orientation)$"><ul><h3><li>void AddOrientation(const SFRotation&amp; orientation);</li></h3></a>
</ul>
</ul>	   <dd>Add an item to the m_Orientation array (grow if needed).
<p>
<dl><dl>
<dt><i>in</i><strong> orientation:</strong>
<dd>The value to add to the m_Orientation array.
<p>
</dl></dl>
<a name="void_SetOrientation(const_MFRotation&amp;_orientation)$"><ul><h3><li>void SetOrientation(const MFRotation&amp; orientation);</li></h3></a>
</ul>
</ul>	   <dd>Replace the values of the m_Orientation member (copies values).
<p>
<dl><dl>
<dt><i>in</i><strong> orientation:</strong>
<dd>The m_Orientation array.
<p>
</dl></dl>
<a name="void_AddScale(const_SFVec2f&amp;_scale)$"><ul><h3><li>void AddScale(const SFVec2f&amp; scale);</li></h3></a>
</ul>
</ul>	   <dd>Add an item to the m_Scale array (grow if needed).
<p>
<dl><dl>
<dt><i>in</i><strong> scale:</strong>
<dd>The value to add to the m_Scale array.
<p>
</dl></dl>
<a name="void_SetScale(const_MFVec2f&amp;_scale)$"><ul><h3><li>void SetScale(const MFVec2f&amp; scale);</li></h3></a>
</ul>
</ul>	   <dd>Replace the values of the m_Scale member (copies values).
<p>
<dl><dl>
<dt><i>in</i><strong> scale:</strong>
<dd>The m_Scale array.
<p>
</dl></dl>
<a name="void_AddSpine(const_SFVec3f&amp;_spine)$"><ul><h3><li>void AddSpine(const SFVec3f&amp; spine);</li></h3></a>
</ul>
</ul>	   <dd>Add an item to the m_Spine array (grow if needed).
<p>
<dl><dl>
<dt><i>in</i><strong> spine:</strong>
<dd>The value to add to the m_Spine array.
<p>
</dl></dl>
<a name="void_SetSpine(const_MFVec3f&amp;_spine)$"><ul><h3><li>void SetSpine(const MFVec3f&amp; spine);</li></h3></a>
</ul>
</ul>	   <dd>Replace the values of the m_Spine member (copies values).
<p>
<dl><dl>
<dt><i>in</i><strong> spine:</strong>
<dd>The m_Spine array.
<p>
</dl></dl>
<a name="SFInt32_GetNCrossSections(void)_const$"><ul><h3><li>SFInt32 GetNCrossSections(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the number of values in the m_CrossSection member.
<p>
<a name="SFVec2f_GetCrossSection(SFInt32_n)_const$"><ul><h3><li>SFVec2f GetCrossSection(SFInt32 n) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the nth value in the m_CrossSection member.
<p>
<dl><dl>
<dt><i>in</i><strong> n:</strong>
<dd>The index into the array.
<p>
</dl></dl>
<a name="const_MFVec2f&amp;_GetCrossSectionArray(void)_const$"><ul><h3><li>const MFVec2f&amp; GetCrossSectionArray(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the m_CrossSection member.
<p>
<a name="SFInt32_GetNOrientations(void)_const$"><ul><h3><li>SFInt32 GetNOrientations(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the number of values in the m_Orientation member.
<p>
<a name="SFRotation_GetOrientation(SFInt32_n)_const$"><ul><h3><li>SFRotation GetOrientation(SFInt32 n) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the nth value in the m_Orientation member.
<p>
<dl><dl>
<dt><i>in</i><strong> n:</strong>
<dd>The index into the array.
<p>
</dl></dl>
<a name="const_MFRotation&amp;_GetOrientationArray(void)_const$"><ul><h3><li>const MFRotation&amp; GetOrientationArray(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the m_Orientation member.
<p>
<a name="SFInt32_GetNScales(void)_const$"><ul><h3><li>SFInt32 GetNScales(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the number of values in the m_Scale member.
<p>
<a name="SFVec2f_GetScale(SFInt32_n)_const$"><ul><h3><li>SFVec2f GetScale(SFInt32 n) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the nth value in the m_Scale member.
<p>
<dl><dl>
<dt><i>in</i><strong> n:</strong>
<dd>The index into the array.
<p>
</dl></dl>
<a name="const_MFVec2f&amp;_GetScaleArray(void)_const$"><ul><h3><li>const MFVec2f&amp; GetScaleArray(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the m_Scale member.
<p>
<a name="SFInt32_GetNSpines(void)_const$"><ul><h3><li>SFInt32 GetNSpines(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the number of values in the m_Spine member.
<p>
<a name="SFVec3f_GetSpine(SFInt32_n)_const$"><ul><h3><li>SFVec3f GetSpine(SFInt32 n) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the nth value in the m_Spine member.
<p>
<dl><dl>
<dt><i>in</i><strong> n:</strong>
<dd>The index into the array.
<p>
</dl></dl>
<a name="const_MFVec3f&amp;_GetSpineArray(void)_const$"><ul><h3><li>const MFVec3f&amp; GetSpineArray(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the m_Spine member.
<p>
<a name="void_Traverse(vrTraverser_*trav)_const$"><ul><h3><li>void Traverse(vrTraverser *trav) const;</li></h3></a>
</ul>
</ul>	   <dd>Respond to a traversal by an arbitrary traverser.  Note: Normally, nodes just call t-&gt;<a href="vrextrusion.htm#void_Traverse(vrTraverser_*trav)_const$">Traverse</a>(this)
	   <dd>to have the traverser handle the traversal.  you may override this method in your derived class to
	   <dd>handle traversals of node types.
<p>
<dl><dl>
<dt><i>in</i><strong> trav:</strong>
<dd>The <a href="vrTraverser.htm">vrTraverser</a> requesting the traversal.
<p>
</dl></dl>
<a name="void_ReceiveEventIn(vrEvent_*event)$"><ul><h3><li>void ReceiveEventIn(vrEvent *event);</li></h3></a>
</ul>
</ul>	   <dd>Receive an event during an event cascade or directly from caller.
<p>
<dl><dl>
<dt><i>in</i><strong> event:</strong>
<dd>The <a href="vrEvent.htm">vrEvent</a> to be processed.
<p>
</dl></dl>
<a name="SFBool_IsDefault(const_SFString&amp;_fieldName_,_vrField_*field_)_const$"><ul><h3><li>SFBool IsDefault(const SFString&amp; fieldName , vrField *field ) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns TRUE if the node (or a particular field) is in it's default state.
<p>
<dl><dl>
<dt><i>in</i><strong> fieldName:</strong>
<dd>The field to check for default value.  NULL implies check all fields of this node.
<dt><i>out</i><strong> field:</strong>
<dd>If non-NULL the value of the field will be returned in field.
<p>
</dl></dl>
<a name="DECLARE_NODE(vrExtrusion)$"><ul><h3><li>DECLARE_NODE(vrExtrusion);</li></h3></a>
</ul>
</ul>	   <dd>Declare that this node may be runtime typed and dynamically created. [ <a href="../../Documentation/define.htm#DECLARE_NODE">DECLARE_NODE</a> ]
<p>
<a name="parents"><hr><p></p></a>
<h2><i>Ancestors</i></h2>
<ul>
Inheritance chain for vrExtrusion:<p>
<ul>
<li><a href="vrBaseNode.htm">vrBaseNode</a>
<li><a href="vrNode.htm">vrNode</a>
<li><a href="vrGeometryNode.htm">vrGeometryNode</a>
</ul>
</ul>
<a name="children"><hr><p></p></a>
<h2><i>Descendants</i></h2>
<ul>
No descendants.<p>
</ul>
<hr><p></p>
Generated from source by the <i><a href="http://www.cs.umn.edu/~kotula/cocoon/cocoon.htm">Cocoon</a></i> utilities on Mon Feb 01 22:20:51 1999
.<p>
</body></html>
