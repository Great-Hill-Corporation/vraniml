<html><head><title>vrAppearance Documentation</title></head>
<body BACKGROUND="sumtextb.jpg" BGCOLOR="#FFFFFF"><h1>
<a name="topofdoc"><img src="logo.gif" WIDTH="75" HEIGHT="75">vrAppearance</a></h1>
<dl>
<dd>
	This class corresponds to the Appearance node in VRML.  
	<a href="../spec/part1/nodesRef.html#Appearance">Further information</a> 
	about this class is available in any VRML related documentation.

</dl>
<hr><p></p>
<p><strong>[ 
<a href="../../Documentation/utility.htm">Utility</a> | <a href="../../Documentation/solids.htm">Solid</a> | <a href="../../Documentation/noderef.htm">VRML97</a> ]<br>[  
<a href="vrappearance.htm#aag">Summary</a> | </a>
<a href="vrappearance.htm#DESCRIPTION">Description</a> | 
<a href="vrappearance.htm#NOTES">Notes</a> | 
<a href="vrappearance.htm#EXAMPLE_CODE">Example Code</a> | 
<a href="vrappearance.htm#MEMBERS">Members</a> | 
<a href="vrappearance.htm#parents">Ancestors</a> | <a href="vrappearance.htm#children">Descendants</a>  ]</strong><p>
<a name="aag"><hr><p></p></a><h2><i>Summary</i></h2>
class <spc> vrAppearance : public <a href="vrNode.htm">vrNode</a><br>
<br>
 {
<br>
<table>
<tr><td align="left"><font size="+1"><i><b>public:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrAppearance.htm#vrAppearance(void)$">vrAppearance</a>(void);</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrAppearance.htm#vrAppearance(const_vrAppearance&amp;_v)$">vrAppearance</a>(const vrAppearance&amp; v);</td></tr>
<tr><td align="right" valign="top"></td><td>~<i><a href="vrAppearance.htm#~vrAppearance(void)$">vrAppearance</a></i>(void);</td></tr>
<tr><td align="right" valign="top">vrAppearance&amp; </td><td><a href="vrAppearance.htm#vrAppearance&amp;_operator$(const_vrAppearance&amp;_v)$">operator=</a>(const vrAppearance&amp; v);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFNode">SFNode </a> </td><td><i><a href="vrAppearance.htm#SFNode_Clone(void)_const$">Clone</a></i>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrAppearance.htm#void_SetMaterial(const_vrMaterial*_material)$">SetMaterial</a>(const <a href="vrMaterial.htm">vrMaterial</a>* material);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrAppearance.htm#void_SetTexture(const_vrPixelTexture*_texture)$">SetTexture</a>(const <a href="vrPixelTexture.htm">vrPixelTexture</a>* texture);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrAppearance.htm#void_SetTextureTransform(const_vrTextureTransform*_texturetransform)$">SetTextureTransform</a>(const <a href="vrTextureTransform.htm">vrTextureTransform</a>* texturetransform);</td></tr>
<tr><td align="right" valign="top"><a href="vrMaterial.htm">vrMaterial</a>* </td><td><a href="vrAppearance.htm#vrMaterial*_GetMaterial(void)_const$">GetMaterial</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="vrPixelTexture.htm">vrPixelTexture</a>* </td><td><a href="vrAppearance.htm#vrPixelTexture*_GetTexture(void)_const$">GetTexture</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="vrTextureTransform.htm">vrTextureTransform</a>* </td><td><a href="vrAppearance.htm#vrTextureTransform*_GetTextureTransform(void)_const$">GetTextureTransform</a>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrAppearance.htm#void_Traverse(vrTraverser_*trav)_const$">Traverse</a></i>(<a href="vrTraverser.htm">vrTraverser</a> *trav) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrAppearance.htm#void_ReceiveEventIn(vrEvent_*event)$">ReceiveEventIn</a></i>(<a href="vrEvent.htm">vrEvent</a> *event);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFNode">SFNode </a> </td><td><i><a href="vrAppearance.htm#SFNode_FindByType(vrRuntimeClass_*pClass)_const$">FindByType</a></i>(<a href="vrRuntimeClass.htm">vrRuntimeClass</a> *pClass) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFNode">SFNode </a> </td><td><i><a href="vrAppearance.htm#SFNode_FindByName(const_SFString&amp;_nodeName)_const$">FindByName</a></i>(const <a href="SFString.htm">SFString</a>&amp; nodeName) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><i><a href="vrAppearance.htm#SFBool_ForEvery(PFBO3V_userFn,_void_*userData,_PFBO3V_afterFn_)$">ForEvery</a></i>(PFBO3V userFn, void *userData, PFBO3V afterFn );</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><i><a href="vrAppearance.htm#SFBool_IsDefault(const_SFString&amp;_fieldName_,_vrField_*field_)_const$">IsDefault</a></i>(const <a href="SFString.htm">SFString</a>&amp; fieldName , <a href="vrField.htm">vrField</a> *field ) const;</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrAppearance.htm#DECLARE_NODE(vrAppearance)$">DECLARE_NODE</a>(vrAppearance);</td></tr>
<tr><td align="left"><font size="+1"><i><b>protected:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"><a href="vrMaterial.htm">vrMaterial</a>* </td><td><a href="vrAppearance.htm#vrMaterial*_m_Material$">m_Material</a>;</td></tr>
<tr><td align="right" valign="top"><a href="vrPixelTexture.htm">vrPixelTexture</a>* </td><td><a href="vrAppearance.htm#vrPixelTexture*_m_Texture$">m_Texture</a>;</td></tr>
<tr><td align="right" valign="top"><a href="vrTextureTransform.htm">vrTextureTransform</a>* </td><td><a href="vrAppearance.htm#vrTextureTransform*_m_TextureTransform$">m_TextureTransform</a>;</td></tr>
</table>
}; <p>
<a name="DESCRIPTION"><hr><p></p></a><h2><i>Description</i></h2>
	<ul>This node corresponds to the Appearance node as defined in the VRML97 
	specification.  Like all Node Classes this class is better described in the 
	<a href="../spec/index.html">VRML97 Specification</a>.  In particular, at this 
	<a href="../spec/part1/nodesRef.html#Appearance">link</a>.</ul>
<p>
<a name="NOTES"><hr><p></p></a><h2><i>Notes</i></h2>
	<ul>
	<li>All node classes share certain aspects which are described <a href="../nodespec.htm">here</a>.</li>
	</ul>
<p>
<a name="EXAMPLE_CODE"><hr><p></p></a><h2><i>Example Code</i></h2>
	<pre>
	// None.
	</pre>
<p>
<a name="MEMBERS"><hr><p></p></a><h2><i>Members</i></h2>
<a name="vrMaterial*_m_Material$"><ul><h3><li>vrMaterial* m_Material;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'material' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> NULL</strong>
<p>
</dl></dl>
<a name="vrPixelTexture*_m_Texture$"><ul><h3><li>vrPixelTexture* m_Texture;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'texture' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> NULL</strong>
<p>
</dl></dl>
<a name="vrTextureTransform*_m_TextureTransform$"><ul><h3><li>vrTextureTransform* m_TextureTransform;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'textureTransform' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> NULL</strong>
<p>
</dl></dl>
<a name="vrAppearance(void)$"><ul><h3><li>vrAppearance(void);</li></h3></a>
</ul>
</ul>	   <dd>Default constructor.
<p>
<a name="vrAppearance(const_vrAppearance&amp;_v)$"><ul><h3><li>vrAppearance(const vrAppearance&amp; v);</li></h3></a>
</ul>
</ul>	   <dd>Copy constructor.
<p>
<a name="~vrAppearance(void)$"><ul><h3><li>~vrAppearance(void);</li></h3></a>
</ul>
</ul>	   <dd>Destructor.
<p>
<a name="vrAppearance&amp;_operator$(const_vrAppearance&amp;_v)$"><ul><h3><li>vrAppearance&amp; operator=(const vrAppearance&amp; v);</li></h3></a>
</ul>
</ul>	   <dd>Equals operator.
<p>
<a name="SFNode_Clone(void)_const$"><ul><h3><li>SFNode Clone(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns an exact copy of the given node.
<p>
<a name="void_SetMaterial(const_vrMaterial*_material)$"><ul><h3><li>void SetMaterial(const vrMaterial* material);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_Material member.
<p>
<dl><dl>
<dt><i>in</i><strong> material:</strong>
<dd>The material value.
<p>
</dl></dl>
<a name="void_SetTexture(const_vrPixelTexture*_texture)$"><ul><h3><li>void SetTexture(const vrPixelTexture* texture);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_Texture member.
<p>
<dl><dl>
<dt><i>in</i><strong> texture:</strong>
<dd>The texture value.
<p>
</dl></dl>
<a name="void_SetTextureTransform(const_vrTextureTransform*_texturetransform)$"><ul><h3><li>void SetTextureTransform(const vrTextureTransform* texturetransform);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_TextureTransform member.
<p>
<dl><dl>
<dt><i>in</i><strong> texturetransform:</strong>
<dd>The texturetransform value.
<p>
</dl></dl>
<a name="vrMaterial*_GetMaterial(void)_const$"><ul><h3><li>vrMaterial* GetMaterial(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_Material member.
<p>
<a name="vrPixelTexture*_GetTexture(void)_const$"><ul><h3><li>vrPixelTexture* GetTexture(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_Texture member.
<p>
<a name="vrTextureTransform*_GetTextureTransform(void)_const$"><ul><h3><li>vrTextureTransform* GetTextureTransform(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_TextureTransform member.
<p>
<a name="void_Traverse(vrTraverser_*trav)_const$"><ul><h3><li>void Traverse(vrTraverser *trav) const;</li></h3></a>
</ul>
</ul>	   <dd>Respond to a traversal by an arbitrary traverser.  Note: Normally, nodes just call t-&gt;<a href="vrappearance.htm#void_Traverse(vrTraverser_*trav)_const$">Traverse</a>(this)
	   <dd>to have the traverser handle the traversal.  you may override this method in your derived class to
	   <dd>handle traversals of node types.
<p>
<dl><dl>
<dt><i>in</i><strong> trav:</strong>
<dd>The <a href="vrTraverser.htm">vrTraverser</a> requesting the traversal.
<p>
</dl></dl>
<a name="void_ReceiveEventIn(vrEvent_*event)$"><ul><h3><li>void ReceiveEventIn(vrEvent *event);</li></h3></a>
</ul>
</ul>	   <dd>Receive an event during an event cascade or directly from caller.
<p>
<dl><dl>
<dt><i>in</i><strong> event:</strong>
<dd>The <a href="vrEvent.htm">vrEvent</a> to be processed.
<p>
</dl></dl>
<a name="SFNode_FindByType(vrRuntimeClass_*pClass)_const$"><ul><h3><li>SFNode FindByType(vrRuntimeClass *pClass) const;</li></h3></a>
</ul>
</ul>	   <dd>Find a node by class type.  Returns NULL if not found. (Overridden to search <a href="vrNode.htm">vrNode</a> derived data members).
<p>
<dl><dl>
<dt><i>in</i><strong> pClass:</strong>
<dd>Pointer to a <a href="vrRuntimeClass.htm">vrRuntimeClass</a> representing the searched for type.
<p>
</dl></dl>
<a name="SFNode_FindByName(const_SFString&amp;_nodeName)_const$"><ul><h3><li>SFNode FindByName(const SFString&amp; nodeName) const;</li></h3></a>
</ul>
</ul>	   <dd>Find a node by name.  Returns NULL if not found.  (Overridden to search <a href="vrNode.htm">vrNode</a> derived data members)
<p>
<dl><dl>
<dt><i>in</i><strong> nodeName:</strong>
<dd>The name of the node being searched for.
<p>
</dl></dl>
<a name="SFBool_ForEvery(PFBO3V_userFn,_void_*userData,_PFBO3V_afterFn_)$"><ul><h3><li>SFBool ForEvery(PFBO3V userFn, void *userData, PFBO3V afterFn );</li></h3></a>
</ul>
</ul>	   <dd>Apply 'userFn' to all contained nodes (including any children and/or direct references).  [ <a href="../forevery.htm">Additional information.</a> ]
<p>
<dl><dl>
<dt><i>in</i><strong> userFn:</strong>
<dd>Pointer to a function returning SFBool and taking an SFNode and void pointer as arguments.  'userFn' is applied to this node and all children (if any).
<dt><i>in</i><strong> userData:</strong>
<dd>Pointer to arbitrary user data.
<dt><i>in</i><strong> afterFn:</strong>
<dd>Pointer to a function to apply after applying 'userFn' to all children (for example: popping a stack).
<p>
</dl></dl>
<a name="SFBool_IsDefault(const_SFString&amp;_fieldName_,_vrField_*field_)_const$"><ul><h3><li>SFBool IsDefault(const SFString&amp; fieldName , vrField *field ) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns TRUE if the node (or a particular field) is in it's default state.
<p>
<dl><dl>
<dt><i>in</i><strong> fieldName:</strong>
<dd>The field to check for default value.  NULL implies check all fields of this node.
<dt><i>out</i><strong> field:</strong>
<dd>If non-NULL the value of the field will be returned in field.
<p>
</dl></dl>
<a name="DECLARE_NODE(vrAppearance)$"><ul><h3><li>DECLARE_NODE(vrAppearance);</li></h3></a>
</ul>
</ul>	   <dd>Declare that this node may be runtime typed and dynamically created. [ <a href="../../Documentation/define.htm#DECLARE_NODE">DECLARE_NODE</a> ]
<p>
<a name="parents"><hr><p></p></a>
<h2><i>Ancestors</i></h2>
<ul>
Inheritance chain for vrAppearance:<p>
<ul>
<li><a href="vrBaseNode.htm">vrBaseNode</a>
<li><a href="vrNode.htm">vrNode</a>
</ul>
</ul>
<a name="children"><hr><p></p></a>
<h2><i>Descendants</i></h2>
<ul>
No descendants.<p>
</ul>
<hr><p></p>
Generated from source by the <i><a href="http://www.cs.umn.edu/~kotula/cocoon/cocoon.htm">Cocoon</a></i> utilities on Mon Feb 01 22:20:57 1999
.<p>
</body></html>
