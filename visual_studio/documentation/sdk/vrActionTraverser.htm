<html><head><title>vrActionTraverser Documentation</title></head>
<body BACKGROUND="sumtextb.jpg" BGCOLOR="#FFFFFF"><h1>
<a name="topofdoc"><img src="logo.gif" WIDTH="75" HEIGHT="75">vrActionTraverser</a></h1>
<dl>
<dd>
	A traverser that generate any actions initiating event cascades.

</dl>
<hr><p></p>
<p><strong>[ 
<a href="../../Documentation/utility.htm">Utility</a> | <a href="../../Documentation/solids.htm">Solid</a> | <a href="../../Documentation/noderef.htm">VRML97</a> ]<br>[  
<a href="vractiontraverser.htm#aag">Summary</a> | </a>
<a href="vractiontraverser.htm#DESCRIPTION">Description</a> | 
<a href="vractiontraverser.htm#NOTES">Notes</a> | 
<a href="vractiontraverser.htm#EXAMPLE_CODE">Example Code</a> | 
<a href="vractiontraverser.htm#MEMBERS">Members</a> | 
<a href="vractiontraverser.htm#parents">Ancestors</a> | <a href="vractiontraverser.htm#children">Descendants</a>  ]</strong><p>
<a name="aag"><hr><p></p></a><h2><i>Summary</i></h2>
class <spc> vrActionTraverser : public <a href="vrTraverser.htm">vrTraverser</a><br>
<br>
 {
<br>
<table>
<tr><td align="left"><font size="+1"><i><b>public:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrActionTraverser.htm#vrActionTraverser(vrBrowser_*b_,_void_*h_)$">vrActionTraverser</a>(<a href="vrBrowser.htm">vrBrowser</a> *b , void *h );</td></tr>
<tr><td align="right" valign="top"></td><td>~<i><a href="vrActionTraverser.htm#~vrActionTraverser(void)_$">vrActionTraverser</a></i>(void) ;</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrMovieTexture_*node)$">Traverse</a></i>(const <a href="vrMovieTexture.htm">vrMovieTexture</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrViewpoint_*node)$">Traverse</a></i>(const <a href="vrViewpoint.htm">vrViewpoint</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrAudioClip_*node)$">Traverse</a></i>(const <a href="vrAudioClip.htm">vrAudioClip</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrScript_*node)$">Traverse</a></i>(const <a href="vrScript.htm">vrScript</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrSound_*node)$">Traverse</a></i>(const <a href="vrSound.htm">vrSound</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrGroupingNode_*node)$">Traverse</a></i>(const <a href="vrGroupingNode.htm">vrGroupingNode</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrAnchor_*node)$">Traverse</a></i>(const <a href="vrAnchor.htm">vrAnchor</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrBillboard_*node)$">Traverse</a></i>(const <a href="vrBillboard.htm">vrBillboard</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrCollision_*node)$">Traverse</a></i>(const <a href="vrCollision.htm">vrCollision</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrGroup_*node)$">Traverse</a></i>(const <a href="vrGroup.htm">vrGroup</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrTransform_*node)$">Traverse</a></i>(const <a href="vrTransform.htm">vrTransform</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrInline_*node)$">Traverse</a></i>(const <a href="vrInline.htm">vrInline</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrLOD_*node)$">Traverse</a></i>(const <a href="vrLOD.htm">vrLOD</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrSwitch_*node)$">Traverse</a></i>(const <a href="vrSwitch.htm">vrSwitch</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrSensor_*node)$">Traverse</a></i>(const <a href="vrSensor.htm">vrSensor</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrCylinderSensor_*node)$">Traverse</a></i>(const <a href="vrCylinderSensor.htm">vrCylinderSensor</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrPlaneSensor_*node)$">Traverse</a></i>(const <a href="vrPlaneSensor.htm">vrPlaneSensor</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrProximitySensor_*node)$">Traverse</a></i>(const <a href="vrProximitySensor.htm">vrProximitySensor</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrSphereSensor_*node)$">Traverse</a></i>(const <a href="vrSphereSensor.htm">vrSphereSensor</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrTimeSensor_*node)$">Traverse</a></i>(const <a href="vrTimeSensor.htm">vrTimeSensor</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrTouchSensor_*node)$">Traverse</a></i>(const <a href="vrTouchSensor.htm">vrTouchSensor</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrVisibilitySensor_*node)$">Traverse</a></i>(const <a href="vrVisibilitySensor.htm">vrVisibilitySensor</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_Traverse(const_vrBrowser_*node)$">Traverse</a></i>(const <a href="vrBrowser.htm">vrBrowser</a> *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_PreTraverse()$">PreTraverse</a></i>();</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrActionTraverser.htm#void_PostTraverse()$">PostTraverse</a></i>();</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><i><a href="vrActionTraverser.htm#SFBool_ProcessUserMessage(const_vrUserMessage&amp;_msg)$">ProcessUserMessage</a></i>(const vrUserMessage&amp; msg);</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrActionTraverser.htm#DECLARE_NODE(vrActionTraverser)$">DECLARE_NODE</a>(vrActionTraverser);</td></tr>
<tr><td align="left"><font size="+1"><i><b>protected:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrActionTraverser.htm#SFBool_hasSensor$">hasSensor</a>;</td></tr>
</table>
}; <p>
<a name="DESCRIPTION"><hr><p></p></a><h2><i>Description</i></h2>
	<ul>
	A traverser that generate any actions initiating event cascades.
	This includes both user generated events (mouse events) and 
	Sensor events.
	</ul>
<p>
<a name="NOTES"><hr><p></p></a><h2><i>Notes</i></h2>
	<ul>
	<li>Most node types are handled by the base class <a href="vrTraverser.htm">vrTraverser</a>.  This class
	only handles the nodes that can initiate event cascades.  For example,
	the geometry and interpolator nodes never initiate event cascades (even
	though they may participate in an event cascade).</li>
	<li>Like all traversers this class has a single method called Traverse for
	each of the built-in nodes types (although some Traverse functions may actually
	be defined in the base class).  These Traverse methods handle each node
	seperatly and in an appropriate way.  These seperate methods are not
	documented.</li>
	</ul>
<p>
<a name="EXAMPLE_CODE"><hr><p></p></a><h2><i>Example Code</i></h2>
	<pre>
	// None.
	</pre>
<p>
<a name="MEMBERS"><hr><p></p></a><h2><i>Members</i></h2>
<a name="vrActionTraverser(vrBrowser_*b_,_void_*h_)$"><ul><h3><li>vrActionTraverser(vrBrowser *b , void *h );</li></h3></a>
</ul>
</ul>	   <dd>Constructor.
<p>
<dl><dl>
<dt><i>in</i><strong> b:</strong>
<dd>The browser to attach this traverser to.
<dt><i>in</i><strong> h:</strong>
<dd>A window handle.
<p>
</dl></dl>
<a name="~vrActionTraverser(void)_$"><ul><h3><li>~vrActionTraverser(void) ;</li></h3></a>
</ul>
</ul>	   <dd>Destructor.
<p>
<p>
<a name="void_Traverse(const_vrMovieTexture_*node)$"><ul><h3><li>void Traverse(const vrMovieTexture *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrViewpoint_*node)$"><ul><h3><li>void Traverse(const vrViewpoint *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrAudioClip_*node)$"><ul><h3><li>void Traverse(const vrAudioClip *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrScript_*node)$"><ul><h3><li>void Traverse(const vrScript *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrSound_*node)$"><ul><h3><li>void Traverse(const vrSound *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrGroupingNode_*node)$"><ul><h3><li>void Traverse(const vrGroupingNode *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrAnchor_*node)$"><ul><h3><li>void Traverse(const vrAnchor *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrBillboard_*node)$"><ul><h3><li>void Traverse(const vrBillboard *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrCollision_*node)$"><ul><h3><li>void Traverse(const vrCollision *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrGroup_*node)$"><ul><h3><li>void Traverse(const vrGroup *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrTransform_*node)$"><ul><h3><li>void Traverse(const vrTransform *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrInline_*node)$"><ul><h3><li>void Traverse(const vrInline *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrLOD_*node)$"><ul><h3><li>void Traverse(const vrLOD *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrSwitch_*node)$"><ul><h3><li>void Traverse(const vrSwitch *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrSensor_*node)$"><ul><h3><li>void Traverse(const vrSensor *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrCylinderSensor_*node)$"><ul><h3><li>void Traverse(const vrCylinderSensor *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrPlaneSensor_*node)$"><ul><h3><li>void Traverse(const vrPlaneSensor *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrProximitySensor_*node)$"><ul><h3><li>void Traverse(const vrProximitySensor *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrSphereSensor_*node)$"><ul><h3><li>void Traverse(const vrSphereSensor *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrTimeSensor_*node)$"><ul><h3><li>void Traverse(const vrTimeSensor *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrTouchSensor_*node)$"><ul><h3><li>void Traverse(const vrTouchSensor *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrVisibilitySensor_*node)$"><ul><h3><li>void Traverse(const vrVisibilitySensor *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_Traverse(const_vrBrowser_*node)$"><ul><h3><li>void Traverse(const vrBrowser *node);</li></h3></a>
</ul>
</ul>	   <dd>Traverse this node.
<p>
<a name="void_PreTraverse()$"><ul><h3><li>void PreTraverse();</li></h3></a>
</ul>
</ul>	   <dd>A chance to do something just prior to a traversal.
<p>
<a name="void_PostTraverse()$"><ul><h3><li>void PostTraverse();</li></h3></a>
</ul>
</ul>	   <dd>A chance to do something just after a traversal.
<p>
<a name="SFBool_ProcessUserMessage(const_vrUserMessage&amp;_msg)$"><ul><h3><li>SFBool ProcessUserMessage(const vrUserMessage&amp; msg);</li></h3></a>
</ul>
</ul>	   <dd>Respond to a user generated event.
<p>
<dl><dl>
<dt><i>in</i><strong> msg:</strong>
<dd>The vrUserMessage event.
<p>
</dl></dl>
<a name="DECLARE_NODE(vrActionTraverser)$"><ul><h3><li>DECLARE_NODE(vrActionTraverser);</li></h3></a>
</ul>
</ul>	   <dd>Declare that this class may be runtime typed. [ <a href="../../Documentation/define.htm#DECLARE_NODE">DECLARE_NODE</a> ]
<p>
<a name="SFBool_hasSensor$"><ul><h3><li>SFBool hasSensor;</li></h3></a>
</ul>
</ul>	   <dd>TRUE if the most recent traversal encountered any sensors in the scene graph.
<p>
<dl><dl>
<dt><i>default</i><strong> FALSE</strong>
<p>
</dl></dl>
<a name="parents"><hr><p></p></a>
<h2><i>Ancestors</i></h2>
<ul>
Inheritance chain for vrActionTraverser:<p>
<ul>
<li><a href="vrBaseNode.htm">vrBaseNode</a>
<li><a href="vrTraverser.htm">vrTraverser</a>
</ul>
</ul>
<a name="children"><hr><p></p></a>
<h2><i>Descendants</i></h2>
<ul>
No descendants.<p>
</ul>
<hr><p></p>
Generated from source by the <i><a href="http://www.cs.umn.edu/~kotula/cocoon/cocoon.htm">Cocoon</a></i> utilities on Mon Feb 01 22:20:57 1999
.<p>
</body></html>
