<html><head><title>vrText Documentation</title></head>
<body BACKGROUND="sumtextb.jpg" BGCOLOR="#FFFFFF"><h1>
<a name="topofdoc"><img src="logo.gif" WIDTH="75" HEIGHT="75">vrText</a></h1>
<dl>
<dd>
	This class corresponds to the Text node in VRML.  
	<a href="../spec/part1/nodesRef.html#Text">Further information</a> 
	about this class is available in any VRML related documentation.

</dl>
<hr><p></p>
<p><strong>[ 
<a href="../../Documentation/utility.htm">Utility</a> | <a href="../../Documentation/solids.htm">Solid</a> | <a href="../../Documentation/noderef.htm">VRML97</a> ]<br>[  
<a href="vrtext.htm#aag">Summary</a> | </a>
<a href="vrtext.htm#DESCRIPTION">Description</a> | 
<a href="vrtext.htm#NOTES">Notes</a> | 
<a href="vrtext.htm#EXAMPLE_CODE">Example Code</a> | 
<a href="vrtext.htm#MEMBERS">Members</a> | 
<a href="vrtext.htm#parents">Ancestors</a> | <a href="vrtext.htm#children">Descendants</a>  ]</strong><p>
<a name="aag"><hr><p></p></a><h2><i>Summary</i></h2>
class <spc> vrText : public <a href="vrGeometryNode.htm">vrGeometryNode</a><br>
<br>
 {
<br>
<table>
<tr><td align="left"><font size="+1"><i><b>public:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrText.htm#vrText(void)$">vrText</a>(void);</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrText.htm#vrText(const_vrText&amp;_v)$">vrText</a>(const vrText&amp; v);</td></tr>
<tr><td align="right" valign="top"></td><td>~<i><a href="vrText.htm#~vrText(void)$">vrText</a></i>(void);</td></tr>
<tr><td align="right" valign="top">vrText&amp; </td><td><a href="vrText.htm#vrText&amp;_operator$(const_vrText&amp;_v)$">operator=</a>(const vrText&amp; v);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFNode">SFNode </a> </td><td><i><a href="vrText.htm#SFNode_Clone(void)_const$">Clone</a></i>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrText.htm#void_AddString(const_SFString&amp;_string)$">AddString</a>(const <a href="SFString.htm">SFString</a>&amp; string);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrText.htm#void_SetString(const_MFString&amp;_string)$">SetString</a>(const <a href="MFString.htm">MFString</a>&amp; string);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrText.htm#void_SetFontStyle(const_vrFontStyle*_fontstyle)$">SetFontStyle</a>(const <a href="vrFontStyle.htm">vrFontStyle</a>* fontstyle);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrText.htm#void_AddLength(SFFloat_length)$">AddLength</a>(SFFloat length);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrText.htm#void_SetLength(const_MFFloat&amp;_length)$">SetLength</a>(const MFFloat&amp; length);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrText.htm#void_SetMaxExtent(SFFloat_maxextent)$">SetMaxExtent</a>(SFFloat maxextent);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFInt32">SFInt32 </a> </td><td><a href="vrText.htm#SFInt32_GetNStrings(void)_const$">GetNStrings</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="SFString.htm">SFString</a> </td><td><a href="vrText.htm#SFString_GetString(SFInt32_n)_const$">GetString</a>(SFInt32 n) const;</td></tr>
<tr><td align="right" valign="top">const <a href="MFString.htm">MFString</a>&amp; </td><td><a href="vrText.htm#const_MFString&amp;_GetStringArray(void)_const$">GetStringArray</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="vrFontStyle.htm">vrFontStyle</a>* </td><td><a href="vrText.htm#vrFontStyle*_GetFontStyle(void)_const$">GetFontStyle</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFInt32">SFInt32 </a> </td><td><a href="vrText.htm#SFInt32_GetNLengths(void)_const$">GetNLengths</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFFloat">SFFloat </a> </td><td><a href="vrText.htm#SFFloat_GetLength(SFInt32_n)_const$">GetLength</a>(SFInt32 n) const;</td></tr>
<tr><td align="right" valign="top">const MFFloat&amp; </td><td><a href="vrText.htm#const_MFFloat&amp;_GetLengthArray(void)_const$">GetLengthArray</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFFloat">SFFloat </a> </td><td><a href="vrText.htm#SFFloat_GetMaxExtent(void)_const$">GetMaxExtent</a>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrText.htm#void_Traverse(vrTraverser_*trav)_const$">Traverse</a></i>(<a href="vrTraverser.htm">vrTraverser</a> *trav) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrText.htm#void_ReceiveEventIn(vrEvent_*event)$">ReceiveEventIn</a></i>(<a href="vrEvent.htm">vrEvent</a> *event);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFNode">SFNode </a> </td><td><i><a href="vrText.htm#SFNode_FindByType(vrRuntimeClass_*pClass)_const$">FindByType</a></i>(<a href="vrRuntimeClass.htm">vrRuntimeClass</a> *pClass) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFNode">SFNode </a> </td><td><i><a href="vrText.htm#SFNode_FindByName(const_SFString&amp;_nodeName)_const$">FindByName</a></i>(const <a href="SFString.htm">SFString</a>&amp; nodeName) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><i><a href="vrText.htm#SFBool_ForEvery(PFBO3V_userFn,_void_*userData,_PFBO3V_afterFn_)$">ForEvery</a></i>(PFBO3V userFn, void *userData, PFBO3V afterFn );</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><i><a href="vrText.htm#SFBool_IsDefault(const_SFString&amp;_fieldName_,_vrField_*field_)_const$">IsDefault</a></i>(const <a href="SFString.htm">SFString</a>&amp; fieldName , <a href="vrField.htm">vrField</a> *field ) const;</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrText.htm#DECLARE_NODE(vrText)$">DECLARE_NODE</a>(vrText);</td></tr>
<tr><td align="left"><font size="+1"><i><b>protected:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"><a href="MFString.htm">MFString</a> </td><td><a href="vrText.htm#MFString_m_String$">m_String</a>;</td></tr>
<tr><td align="right" valign="top"><a href="vrFontStyle.htm">vrFontStyle</a>* </td><td><a href="vrText.htm#vrFontStyle*_m_FontStyle$">m_FontStyle</a>;</td></tr>
<tr><td align="right" valign="top">MFFloat </td><td><a href="vrText.htm#MFFloat_m_Length$">m_Length</a>;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFFloat">SFFloat </a> </td><td><a href="vrText.htm#SFFloat_m_MaxExtent$">m_MaxExtent</a>;</td></tr>
</table>
}; <p>
<a name="DESCRIPTION"><hr><p></p></a><h2><i>Description</i></h2>
	<ul>This node corresponds to the Text node as defined in the VRML97 
	specification.  Like all Node Classes this class is better described in the 
	<a href="../spec/index.html">VRML97 Specification</a>.  In particular, at this 
	<a href="../spec/part1/nodesRef.html#Text">link</a>.</ul>
<p>
<a name="NOTES"><hr><p></p></a><h2><i>Notes</i></h2>
	<ul>
	<li>All node classes share certain aspects which are described <a href="../nodespec.htm">here</a>.</li>
	</ul>
<p>
<a name="EXAMPLE_CODE"><hr><p></p></a><h2><i>Example Code</i></h2>
	<pre>
	// None.
	</pre>
<p>
<a name="MEMBERS"><hr><p></p></a><h2><i>Members</i></h2>
<a name="MFString_m_String$"><ul><h3><li>MFString m_String;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'string' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> []</strong>
<p>
</dl></dl>
<a name="vrFontStyle*_m_FontStyle$"><ul><h3><li>vrFontStyle* m_FontStyle;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'fontStyle' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> NULL</strong>
<p>
</dl></dl>
<a name="MFFloat_m_Length$"><ul><h3><li>MFFloat m_Length;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'length' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> []</strong>
<p>
</dl></dl>
<a name="SFFloat_m_MaxExtent$"><ul><h3><li>SFFloat m_MaxExtent;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'maxExtent' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> 0.0</strong>
<p>
</dl></dl>
<a name="vrText(void)$"><ul><h3><li>vrText(void);</li></h3></a>
</ul>
</ul>	   <dd>Default constructor.
<p>
<a name="vrText(const_vrText&amp;_v)$"><ul><h3><li>vrText(const vrText&amp; v);</li></h3></a>
</ul>
</ul>	   <dd>Copy constructor.
<p>
<a name="~vrText(void)$"><ul><h3><li>~vrText(void);</li></h3></a>
</ul>
</ul>	   <dd>Destructor.
<p>
<a name="vrText&amp;_operator$(const_vrText&amp;_v)$"><ul><h3><li>vrText&amp; operator=(const vrText&amp; v);</li></h3></a>
</ul>
</ul>	   <dd>Equals operator.
<p>
<a name="SFNode_Clone(void)_const$"><ul><h3><li>SFNode Clone(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns an exact copy of the given node.
<p>
<a name="void_AddString(const_SFString&amp;_string)$"><ul><h3><li>void AddString(const SFString&amp; string);</li></h3></a>
</ul>
</ul>	   <dd>Add an item to the m_String array (grow if needed).
<p>
<dl><dl>
<dt><i>in</i><strong> string:</strong>
<dd>The value to add to the m_String array.
<p>
</dl></dl>
<a name="void_SetString(const_MFString&amp;_string)$"><ul><h3><li>void SetString(const MFString&amp; string);</li></h3></a>
</ul>
</ul>	   <dd>Replace the values of the m_String member (copies values).
<p>
<dl><dl>
<dt><i>in</i><strong> string:</strong>
<dd>The m_String array.
<p>
</dl></dl>
<a name="void_SetFontStyle(const_vrFontStyle*_fontstyle)$"><ul><h3><li>void SetFontStyle(const vrFontStyle* fontstyle);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_FontStyle member.
<p>
<dl><dl>
<dt><i>in</i><strong> fontstyle:</strong>
<dd>The fontstyle value.
<p>
</dl></dl>
<a name="void_AddLength(SFFloat_length)$"><ul><h3><li>void AddLength(SFFloat length);</li></h3></a>
</ul>
</ul>	   <dd>Add an item to the m_Length array (grow if needed).
<p>
<dl><dl>
<dt><i>in</i><strong> length:</strong>
<dd>The value to add to the m_Length array.
<p>
</dl></dl>
<a name="void_SetLength(const_MFFloat&amp;_length)$"><ul><h3><li>void SetLength(const MFFloat&amp; length);</li></h3></a>
</ul>
</ul>	   <dd>Replace the values of the m_Length member (copies values).
<p>
<dl><dl>
<dt><i>in</i><strong> length:</strong>
<dd>The m_Length array.
<p>
</dl></dl>
<a name="void_SetMaxExtent(SFFloat_maxextent)$"><ul><h3><li>void SetMaxExtent(SFFloat maxextent);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_MaxExtent member.
<p>
<dl><dl>
<dt><i>in</i><strong> maxextent:</strong>
<dd>The maxextent value.
<p>
</dl></dl>
<a name="SFInt32_GetNStrings(void)_const$"><ul><h3><li>SFInt32 GetNStrings(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the number of values in the m_String member.
<p>
<a name="SFString_GetString(SFInt32_n)_const$"><ul><h3><li>SFString GetString(SFInt32 n) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the nth value in the m_String member.
<p>
<dl><dl>
<dt><i>in</i><strong> n:</strong>
<dd>The index into the array.
<p>
</dl></dl>
<a name="const_MFString&amp;_GetStringArray(void)_const$"><ul><h3><li>const MFString&amp; GetStringArray(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the m_String member.
<p>
<a name="vrFontStyle*_GetFontStyle(void)_const$"><ul><h3><li>vrFontStyle* GetFontStyle(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_FontStyle member.
<p>
<a name="SFInt32_GetNLengths(void)_const$"><ul><h3><li>SFInt32 GetNLengths(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the number of values in the m_Length member.
<p>
<a name="SFFloat_GetLength(SFInt32_n)_const$"><ul><h3><li>SFFloat GetLength(SFInt32 n) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the nth value in the m_Length member.
<p>
<dl><dl>
<dt><i>in</i><strong> n:</strong>
<dd>The index into the array.
<p>
</dl></dl>
<a name="const_MFFloat&amp;_GetLengthArray(void)_const$"><ul><h3><li>const MFFloat&amp; GetLengthArray(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the m_Length member.
<p>
<a name="SFFloat_GetMaxExtent(void)_const$"><ul><h3><li>SFFloat GetMaxExtent(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_MaxExtent member.
<p>
<a name="void_Traverse(vrTraverser_*trav)_const$"><ul><h3><li>void Traverse(vrTraverser *trav) const;</li></h3></a>
</ul>
</ul>	   <dd>Respond to a traversal by an arbitrary traverser.  Note: Normally, nodes just call t-&gt;<a href="vrtext.htm#void_Traverse(vrTraverser_*trav)_const$">Traverse</a>(this)
	   <dd>to have the traverser handle the traversal.  you may override this method in your derived class to
	   <dd>handle traversals of node types.
<p>
<dl><dl>
<dt><i>in</i><strong> trav:</strong>
<dd>The <a href="vrTraverser.htm">vrTraverser</a> requesting the traversal.
<p>
</dl></dl>
<a name="void_ReceiveEventIn(vrEvent_*event)$"><ul><h3><li>void ReceiveEventIn(vrEvent *event);</li></h3></a>
</ul>
</ul>	   <dd>Receive an event during an event cascade or directly from caller.
<p>
<dl><dl>
<dt><i>in</i><strong> event:</strong>
<dd>The <a href="vrEvent.htm">vrEvent</a> to be processed.
<p>
</dl></dl>
<a name="SFNode_FindByType(vrRuntimeClass_*pClass)_const$"><ul><h3><li>SFNode FindByType(vrRuntimeClass *pClass) const;</li></h3></a>
</ul>
</ul>	   <dd>Find a node by class type.  Returns NULL if not found. (Overridden to search <a href="vrNode.htm">vrNode</a> derived data members).
<p>
<dl><dl>
<dt><i>in</i><strong> pClass:</strong>
<dd>Pointer to a <a href="vrRuntimeClass.htm">vrRuntimeClass</a> representing the searched for type.
<p>
</dl></dl>
<a name="SFNode_FindByName(const_SFString&amp;_nodeName)_const$"><ul><h3><li>SFNode FindByName(const SFString&amp; nodeName) const;</li></h3></a>
</ul>
</ul>	   <dd>Find a node by name.  Returns NULL if not found.  (Overridden to search <a href="vrNode.htm">vrNode</a> derived data members)
<p>
<dl><dl>
<dt><i>in</i><strong> nodeName:</strong>
<dd>The name of the node being searched for.
<p>
</dl></dl>
<a name="SFBool_ForEvery(PFBO3V_userFn,_void_*userData,_PFBO3V_afterFn_)$"><ul><h3><li>SFBool ForEvery(PFBO3V userFn, void *userData, PFBO3V afterFn );</li></h3></a>
</ul>
</ul>	   <dd>Apply 'userFn' to all contained nodes (including any children and/or direct references).  [ <a href="../forevery.htm">Additional information.</a> ]
<p>
<dl><dl>
<dt><i>in</i><strong> userFn:</strong>
<dd>Pointer to a function returning SFBool and taking an SFNode and void pointer as arguments.  'userFn' is applied to this node and all children (if any).
<dt><i>in</i><strong> userData:</strong>
<dd>Pointer to arbitrary user data.
<dt><i>in</i><strong> afterFn:</strong>
<dd>Pointer to a function to apply after applying 'userFn' to all children (for example: popping a stack).
<p>
</dl></dl>
<a name="SFBool_IsDefault(const_SFString&amp;_fieldName_,_vrField_*field_)_const$"><ul><h3><li>SFBool IsDefault(const SFString&amp; fieldName , vrField *field ) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns TRUE if the node (or a particular field) is in it's default state.
<p>
<dl><dl>
<dt><i>in</i><strong> fieldName:</strong>
<dd>The field to check for default value.  NULL implies check all fields of this node.
<dt><i>out</i><strong> field:</strong>
<dd>If non-NULL the value of the field will be returned in field.
<p>
</dl></dl>
<a name="DECLARE_NODE(vrText)$"><ul><h3><li>DECLARE_NODE(vrText);</li></h3></a>
</ul>
</ul>	   <dd>Declare that this node may be runtime typed and dynamically created. [ <a href="../../Documentation/define.htm#DECLARE_NODE">DECLARE_NODE</a> ]
<p>
<a name="parents"><hr><p></p></a>
<h2><i>Ancestors</i></h2>
<ul>
Inheritance chain for vrText:<p>
<ul>
<li><a href="vrBaseNode.htm">vrBaseNode</a>
<li><a href="vrNode.htm">vrNode</a>
<li><a href="vrGeometryNode.htm">vrGeometryNode</a>
</ul>
</ul>
<a name="children"><hr><p></p></a>
<h2><i>Descendants</i></h2>
<ul>
No descendants.<p>
</ul>
<hr><p></p>
Generated from source by the <i><a href="http://www.cs.umn.edu/~kotula/cocoon/cocoon.htm">Cocoon</a></i> utilities on Mon Feb 01 22:20:55 1999
.<p>
</body></html>
