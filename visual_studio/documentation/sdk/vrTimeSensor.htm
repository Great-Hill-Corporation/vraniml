<html><head><title>vrTimeSensor Documentation</title></head>
<body BACKGROUND="sumtextb.jpg" BGCOLOR="#FFFFFF"><h1>
<a name="topofdoc"><img src="logo.gif" WIDTH="75" HEIGHT="75">vrTimeSensor</a></h1>
<dl>
<dd>
	This class corresponds to the TimeSensor node in VRML.  
	<a href="../spec/part1/nodesRef.html#TimeSensor">Further information</a> 
	about this class is available in any VRML related documentation.

</dl>
<hr><p></p>
<p><strong>[ 
<a href="../../Documentation/utility.htm">Utility</a> | <a href="../../Documentation/solids.htm">Solid</a> | <a href="../../Documentation/noderef.htm">VRML97</a> ]<br>[  
<a href="vrtimesensor.htm#aag">Summary</a> | </a>
<a href="vrtimesensor.htm#DESCRIPTION">Description</a> | 
<a href="vrtimesensor.htm#NOTES">Notes</a> | 
<a href="vrtimesensor.htm#EXAMPLE_CODE">Example Code</a> | 
<a href="vrtimesensor.htm#MEMBERS">Members</a> | 
<a href="vrtimesensor.htm#parents">Ancestors</a> | <a href="vrtimesensor.htm#children">Descendants</a>  ]</strong><p>
<a name="aag"><hr><p></p></a><h2><i>Summary</i></h2>
class <spc> vrTimeSensor : public <a href="vrSensor.htm">vrSensor</a><br>
<br>
 {
<br>
<table>
<tr><td align="left"><font size="+1"><i><b>public:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrTimeSensor.htm#vrTimeSensor(void)$">vrTimeSensor</a>(void);</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrTimeSensor.htm#vrTimeSensor(const_vrTimeSensor&amp;_v)$">vrTimeSensor</a>(const vrTimeSensor&amp; v);</td></tr>
<tr><td align="right" valign="top"></td><td>~<i><a href="vrTimeSensor.htm#~vrTimeSensor(void)$">vrTimeSensor</a></i>(void);</td></tr>
<tr><td align="right" valign="top">vrTimeSensor&amp; </td><td><a href="vrTimeSensor.htm#vrTimeSensor&amp;_operator$(const_vrTimeSensor&amp;_v)$">operator=</a>(const vrTimeSensor&amp; v);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFNode">SFNode </a> </td><td><i><a href="vrTimeSensor.htm#SFNode_Clone(void)_const$">Clone</a></i>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrTimeSensor.htm#void_SetCycleInterval(SFTime_cycleinterval)$">SetCycleInterval</a>(SFTime cycleinterval);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrTimeSensor.htm#void_SetLoop(SFBool_loop)$">SetLoop</a>(SFBool loop);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrTimeSensor.htm#void_SetStartTime(SFTime_starttime)$">SetStartTime</a>(SFTime starttime);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrTimeSensor.htm#void_SetStopTime(SFTime_stoptime)$">SetStopTime</a>(SFTime stoptime);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFTime">SFTime </a> </td><td><a href="vrTimeSensor.htm#SFTime_GetCycleInterval(void)_const$">GetCycleInterval</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrTimeSensor.htm#SFBool_GetLoop(void)_const$">GetLoop</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFTime">SFTime </a> </td><td><a href="vrTimeSensor.htm#SFTime_GetStartTime(void)_const$">GetStartTime</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFTime">SFTime </a> </td><td><a href="vrTimeSensor.htm#SFTime_GetStopTime(void)_const$">GetStopTime</a>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrTimeSensor.htm#void_SetCycleTime(SFTime_cycletime)$">SetCycleTime</a>(SFTime cycletime);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrTimeSensor.htm#void_SetFraction(SFFloat_fraction)$">SetFraction</a>(SFFloat fraction);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrTimeSensor.htm#void_SetTime(SFTime_time)$">SetTime</a>(SFTime time);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFTime">SFTime </a> </td><td><a href="vrTimeSensor.htm#SFTime_GetCycleTime(void)_const$">GetCycleTime</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFFloat">SFFloat </a> </td><td><a href="vrTimeSensor.htm#SFFloat_GetFraction(void)_const$">GetFraction</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFTime">SFTime </a> </td><td><a href="vrTimeSensor.htm#SFTime_GetTime(void)_const$">GetTime</a>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrTimeSensor.htm#void_Traverse(vrTraverser_*trav)_const$">Traverse</a></i>(<a href="vrTraverser.htm">vrTraverser</a> *trav) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrTimeSensor.htm#void_ReceiveEventIn(vrEvent_*event)$">ReceiveEventIn</a></i>(<a href="vrEvent.htm">vrEvent</a> *event);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><i><a href="vrTimeSensor.htm#SFBool_IsDefault(const_SFString&amp;_fieldName_,_vrField_*field_)_const$">IsDefault</a></i>(const <a href="SFString.htm">SFString</a>&amp; fieldName , <a href="vrField.htm">vrField</a> *field ) const;</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrTimeSensor.htm#DECLARE_NODE(vrTimeSensor)$">DECLARE_NODE</a>(vrTimeSensor);</td></tr>
<tr><td align="left"><font size="+1"><i><b>protected:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFTime">SFTime </a> </td><td><a href="vrTimeSensor.htm#SFTime_m_CycleInterval$">m_CycleInterval</a>;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrTimeSensor.htm#SFBool_m_Loop$">m_Loop</a>;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFTime">SFTime </a> </td><td><a href="vrTimeSensor.htm#SFTime_m_StartTime$">m_StartTime</a>;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFTime">SFTime </a> </td><td><a href="vrTimeSensor.htm#SFTime_m_StopTime$">m_StopTime</a>;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFTime">SFTime </a> </td><td><a href="vrTimeSensor.htm#SFTime_m_CycleTime$">m_CycleTime</a>;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFFloat">SFFloat </a> </td><td><a href="vrTimeSensor.htm#SFFloat_m_Fraction$">m_Fraction</a>;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFTime">SFTime </a> </td><td><a href="vrTimeSensor.htm#SFTime_m_Time$">m_Time</a>;</td></tr>
</table>
}; <p>
<a name="DESCRIPTION"><hr><p></p></a><h2><i>Description</i></h2>
	<ul>This node corresponds to the TimeSensor node as defined in the VRML97 
	specification.  Like all Node Classes this class is better described in the 
	<a href="../spec/index.html">VRML97 Specification</a>.  In particular, at this 
	<a href="../spec/part1/nodesRef.html#TimeSensor">link</a>.</ul>
<p>
<a name="NOTES"><hr><p></p></a><h2><i>Notes</i></h2>
	<ul>
	<li>All node classes share certain aspects which are described <a href="../nodespec.htm">here</a>.</li>
	</ul>
<p>
<a name="EXAMPLE_CODE"><hr><p></p></a><h2><i>Example Code</i></h2>
	<pre>
	// None.
	</pre>
<p>
<a name="MEMBERS"><hr><p></p></a><h2><i>Members</i></h2>
<a name="SFTime_m_CycleInterval$"><ul><h3><li>SFTime m_CycleInterval;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'cycleInterval' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> 1.0</strong>
<p>
</dl></dl>
<a name="SFBool_m_Loop$"><ul><h3><li>SFBool m_Loop;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'loop' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> FALSE</strong>
<p>
</dl></dl>
<a name="SFTime_m_StartTime$"><ul><h3><li>SFTime m_StartTime;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'startTime' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> 0.0</strong>
<p>
</dl></dl>
<a name="SFTime_m_StopTime$"><ul><h3><li>SFTime m_StopTime;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'stopTime' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> 0.0</strong>
<p>
</dl></dl>
<a name="SFTime_m_CycleTime$"><ul><h3><li>SFTime m_CycleTime;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'cycleTime' eventOut.
<p>
<dl><dl>
<dt><i>default</i><strong> 0.0</strong>
<p>
</dl></dl>
<a name="SFFloat_m_Fraction$"><ul><h3><li>SFFloat m_Fraction;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'fraction' eventOut.
<p>
<dl><dl>
<dt><i>default</i><strong> 0.0</strong>
<p>
</dl></dl>
<a name="SFTime_m_Time$"><ul><h3><li>SFTime m_Time;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'time' eventOut.
<p>
<dl><dl>
<dt><i>default</i><strong> 0.0</strong>
<p>
</dl></dl>
<a name="vrTimeSensor(void)$"><ul><h3><li>vrTimeSensor(void);</li></h3></a>
</ul>
</ul>	   <dd>Default constructor.
<p>
<a name="vrTimeSensor(const_vrTimeSensor&amp;_v)$"><ul><h3><li>vrTimeSensor(const vrTimeSensor&amp; v);</li></h3></a>
</ul>
</ul>	   <dd>Copy constructor.
<p>
<a name="~vrTimeSensor(void)$"><ul><h3><li>~vrTimeSensor(void);</li></h3></a>
</ul>
</ul>	   <dd>Destructor.
<p>
<a name="vrTimeSensor&amp;_operator$(const_vrTimeSensor&amp;_v)$"><ul><h3><li>vrTimeSensor&amp; operator=(const vrTimeSensor&amp; v);</li></h3></a>
</ul>
</ul>	   <dd>Equals operator.
<p>
<a name="SFNode_Clone(void)_const$"><ul><h3><li>SFNode Clone(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns an exact copy of the given node.
<p>
<a name="void_SetCycleInterval(SFTime_cycleinterval)$"><ul><h3><li>void SetCycleInterval(SFTime cycleinterval);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_CycleInterval member.
<p>
<dl><dl>
<dt><i>in</i><strong> cycleinterval:</strong>
<dd>The cycleinterval value.
<p>
</dl></dl>
<a name="void_SetLoop(SFBool_loop)$"><ul><h3><li>void SetLoop(SFBool loop);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_Loop member.
<p>
<dl><dl>
<dt><i>in</i><strong> loop:</strong>
<dd>The loop value.
<p>
</dl></dl>
<a name="void_SetStartTime(SFTime_starttime)$"><ul><h3><li>void SetStartTime(SFTime starttime);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_StartTime member.
<p>
<dl><dl>
<dt><i>in</i><strong> starttime:</strong>
<dd>The starttime value.
<p>
</dl></dl>
<a name="void_SetStopTime(SFTime_stoptime)$"><ul><h3><li>void SetStopTime(SFTime stoptime);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_StopTime member.
<p>
<dl><dl>
<dt><i>in</i><strong> stoptime:</strong>
<dd>The stoptime value.
<p>
</dl></dl>
<a name="SFTime_GetCycleInterval(void)_const$"><ul><h3><li>SFTime GetCycleInterval(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_CycleInterval member.
<p>
<a name="SFBool_GetLoop(void)_const$"><ul><h3><li>SFBool GetLoop(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_Loop member.
<p>
<a name="SFTime_GetStartTime(void)_const$"><ul><h3><li>SFTime GetStartTime(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_StartTime member.
<p>
<a name="SFTime_GetStopTime(void)_const$"><ul><h3><li>SFTime GetStopTime(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_StopTime member.
<p>
<a name="void_SetCycleTime(SFTime_cycletime)$"><ul><h3><li>void SetCycleTime(SFTime cycletime);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_CycleTime member.
<p>
<dl><dl>
<dt><i>in</i><strong> cycletime:</strong>
<dd>The cycletime value.
<p>
</dl></dl>
<a name="void_SetFraction(SFFloat_fraction)$"><ul><h3><li>void SetFraction(SFFloat fraction);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_Fraction member.
<p>
<dl><dl>
<dt><i>in</i><strong> fraction:</strong>
<dd>The fraction value.
<p>
</dl></dl>
<a name="void_SetTime(SFTime_time)$"><ul><h3><li>void SetTime(SFTime time);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_Time member.
<p>
<dl><dl>
<dt><i>in</i><strong> time:</strong>
<dd>The time value.
<p>
</dl></dl>
<a name="SFTime_GetCycleTime(void)_const$"><ul><h3><li>SFTime GetCycleTime(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_CycleTime member.
<p>
<a name="SFFloat_GetFraction(void)_const$"><ul><h3><li>SFFloat GetFraction(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_Fraction member.
<p>
<a name="SFTime_GetTime(void)_const$"><ul><h3><li>SFTime GetTime(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_Time member.
<p>
<a name="void_Traverse(vrTraverser_*trav)_const$"><ul><h3><li>void Traverse(vrTraverser *trav) const;</li></h3></a>
</ul>
</ul>	   <dd>Respond to a traversal by an arbitrary traverser.  Note: Normally, nodes just call t-&gt;<a href="vrtimesensor.htm#void_Traverse(vrTraverser_*trav)_const$">Traverse</a>(this)
	   <dd>to have the traverser handle the traversal.  you may override this method in your derived class to
	   <dd>handle traversals of node types.
<p>
<dl><dl>
<dt><i>in</i><strong> trav:</strong>
<dd>The <a href="vrTraverser.htm">vrTraverser</a> requesting the traversal.
<p>
</dl></dl>
<a name="void_ReceiveEventIn(vrEvent_*event)$"><ul><h3><li>void ReceiveEventIn(vrEvent *event);</li></h3></a>
</ul>
</ul>	   <dd>Receive an event during an event cascade or directly from caller.
<p>
<dl><dl>
<dt><i>in</i><strong> event:</strong>
<dd>The <a href="vrEvent.htm">vrEvent</a> to be processed.
<p>
</dl></dl>
<a name="SFBool_IsDefault(const_SFString&amp;_fieldName_,_vrField_*field_)_const$"><ul><h3><li>SFBool IsDefault(const SFString&amp; fieldName , vrField *field ) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns TRUE if the node (or a particular field) is in it's default state.
<p>
<dl><dl>
<dt><i>in</i><strong> fieldName:</strong>
<dd>The field to check for default value.  NULL implies check all fields of this node.
<dt><i>out</i><strong> field:</strong>
<dd>If non-NULL the value of the field will be returned in field.
<p>
</dl></dl>
<a name="DECLARE_NODE(vrTimeSensor)$"><ul><h3><li>DECLARE_NODE(vrTimeSensor);</li></h3></a>
</ul>
</ul>	   <dd>Declare that this node may be runtime typed and dynamically created. [ <a href="../../Documentation/define.htm#DECLARE_NODE">DECLARE_NODE</a> ]
<p>
<a name="parents"><hr><p></p></a>
<h2><i>Ancestors</i></h2>
<ul>
Inheritance chain for vrTimeSensor:<p>
<ul>
<li><a href="vrBaseNode.htm">vrBaseNode</a>
<li><a href="vrNode.htm">vrNode</a>
<li><a href="vrSensor.htm">vrSensor</a>
</ul>
</ul>
<a name="children"><hr><p></p></a>
<h2><i>Descendants</i></h2>
<ul>
No descendants.<p>
</ul>
<hr><p></p>
Generated from source by the <i><a href="http://www.cs.umn.edu/~kotula/cocoon/cocoon.htm">Cocoon</a></i> utilities on Mon Feb 01 22:20:56 1999
.<p>
</body></html>
