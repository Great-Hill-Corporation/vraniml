<html><head><title>vrArray Documentation</title></head>
<body BACKGROUND="sumtextb.jpg" BGCOLOR="#FFFFFF"><h1>
<a name="topofdoc"><img src="logo.gif" WIDTH="75" HEIGHT="75">vrArray</a></h1>
<dl>
<dd>
	Templated arrays that support +, - and * operator (for interpolation for example).


</dl>
<hr><p></p>
<p><strong>[ 
<a href="../../Documentation/utility.htm">Utility</a> | <a href="../../Documentation/solids.htm">Solid</a> | <a href="../../Documentation/noderef.htm">VRML97</a> ]<br>[  
<a href="vrarray.htm#aag">Summary</a> | </a>
<a href="vrarray.htm#DESCRIPTION">Description</a> | 
<a href="vrarray.htm#NOTES">Notes</a> | 
<a href="vrarray.htm#EXAMPLE_CODE">Example Code</a> | 
<a href="vrarray.htm#MEMBERS">Members</a> | 
<a href="vrarray.htm#parents">Ancestors</a> | <a href="vrarray.htm#children">Descendants</a>  ]</strong><p>
<a name="aag"><hr><p></p></a><h2><i>Summary</i></h2>
class vrArray :<br>
public <a href="vrArrayBase.htm">vrArrayBase</a> &lt; TYPE &gt;<br>
<br>
 {
<br>
<table>
<tr><td align="left"><font size="+1"><i><b>public:</b></i></font>
</td></tr>
<tr><td align="right" valign="top">friend vrArray&amp;ltTYPE&gt; </td><td><a href="vrArray.htm#friend_vrArray&amp;ltTYPE&gt;_operator+(const_vrArray&amp;ltTYPE&gt;&amp;_v1,_const_vrArray&amp;ltTYPE&gt;&amp;_v2)$">operator+</a>(const vrArray&amp;ltTYPE&gt;&amp; v1, const vrArray&amp;ltTYPE&gt;&amp; v2);</td></tr>
<tr><td align="right" valign="top">friend vrArray&amp;ltTYPE&gt; </td><td><a href="vrArray.htm#friend_vrArray&amp;ltTYPE&gt;_operator-(const_vrArray&amp;ltTYPE&gt;&amp;_v1,_const_vrArray&amp;ltTYPE&gt;&amp;_v2)$">operator-</a>(const vrArray&amp;ltTYPE&gt;&amp; v1, const vrArray&amp;ltTYPE&gt;&amp; v2);</td></tr>
<tr><td align="right" valign="top">friend vrArray&amp;ltTYPE&gt; </td><td><a href="vrArray.htm#friend_vrArray&amp;ltTYPE&gt;_operator*(const_vrArray&amp;ltTYPE&gt;&amp;_v,_SFFloat_f)$">operator*</a>(const vrArray&amp;ltTYPE&gt;&amp; v, SFFloat f);</td></tr>
<tr><td align="right" valign="top">friend vrArray&amp;ltTYPE&gt; </td><td><a href="vrArray.htm#friend_vrArray&amp;ltTYPE&gt;_operator$(const_vrArray&amp;ltTYPE&gt;&amp;_v,_SFFloat_f)$">operator/</a>(const vrArray&amp;ltTYPE&gt;&amp; v, SFFloat f);</td></tr>
<tr><td align="right" valign="top">friend SFBool </td><td><a href="vrArray.htm#friend_SFBool_operator$$(const_vrArray&amp;ltTYPE&gt;&amp;_v1,_const_vrArray&amp;ltTYPE&gt;&amp;_v2)$">operator==</a>(const vrArray&amp;ltTYPE&gt;&amp; v1, const vrArray&amp;ltTYPE&gt;&amp; v2);</td></tr>
<tr><td align="right" valign="top">friend SFBool </td><td><a href="vrArray.htm#friend_SFBool_operator!$(const_vrArray&amp;ltTYPE&gt;&amp;_v1,_const_vrArray&amp;ltTYPE&gt;&amp;_v2)$">operator!=</a>(const vrArray&amp;ltTYPE&gt;&amp; v1, const vrArray&amp;ltTYPE&gt;&amp; v2);</td></tr>
<tr><td align="right" valign="top">vrArray&amp;ltTYPE&gt;&amp; </td><td><a href="vrArray.htm#vrArray&amp;ltTYPE&gt;&amp;_operator$(const_vrArray&amp;ltTYPE&gt;&amp;_v1)$">operator=</a>(const vrArray&amp;ltTYPE&gt;&amp; v1);</td></tr>
<tr><td align="left"><font size="+1"><i><b>protected:</b></i></font>
</td></tr>
</table>
}; <p>
<a name="DESCRIPTION"><hr><p></p></a><h2><i>Description</i></h2>
	<ul>
	This class is a <a href="vrArrayBase.htm">vrArrayBase</a> that supports operations needed for interpolation.
	For this reason it is the base class for the multi-valued fields such as
	MFInt32, MFFloat, etc.
	</ul>
<p>
<a name="NOTES"><hr><p></p></a><h2><i>Notes</i></h2>
	<ul>
	<li>Items added to vrArray class must support +, - and * operators or there
	will be a compile time error.</li>
	<li>Future versions of this class will support other operators such as == and !=</li>
	</ul>
<p>
<a name="EXAMPLE_CODE"><hr><p></p></a><h2><i>Example Code</i></h2>
	<pre>
	// vrArrays can be treated like any C++ data type in that they
	// support the common mathematical operators '+', '-', '*' and '/'.

	// Note: could have used MFFloat instead.
	vrArray&lt;SFFloat&gt; floatArray1;
	floatArray1[0] = 1.0;
	floatArray1[1] = 2.0;
	floatArray1[2] = 3.0;
	for (int i=0;i&lt;floatArray1.GetCount();i++)
		printf(&quot;%f &quot;, floatArray1[i]);
	printf(&quot;\n&quot;);

	// Note: could have used vrArray&lt;SFFloat&gt; instead.
	MFFloat floatArray2;
	floatArray2[0] = 3.0;
	floatArray2[1] = 2.0;
	floatArray2[2] = 1.0;
	for (i=0;i&lt;floatArray2.GetCount();i++)
		printf(&quot;%f &quot;, floatArray2[i]);
	printf(&quot;\n&quot;);

	MFFloat result;
	result = floatArray1 + floatArray2;
	for (i=0;i&lt;result.GetCount();i++)
		printf(&quot;%f &quot;, result[i]);
	printf(&quot;\n&quot;);

	// OUTPUT:
	// 1.0 2.0 3.0
	// 3.0 2.0 1.0
	// 4.0 4.0 4.0
  </pre>
<p>
<a name="MEMBERS"><hr><p></p></a><h2><i>Members</i></h2>
<a name="friend_vrArray&amp;ltTYPE&gt;_operator+(const_vrArray&amp;ltTYPE&gt;&amp;_v1,_const_vrArray&amp;ltTYPE&gt;&amp;_v2)$"><ul><h3><li>friend vrArray&amp;ltTYPE&gt; operator+(const vrArray&amp;ltTYPE&gt;&amp; v1, const vrArray&amp;ltTYPE&gt;&amp; v2);</li></h3></a>
</ul>
</ul>     <dd>Componentwise addition of each item in both arrays.
<p>
<dl><dl>
<dt><i>in</i><strong> v1:</strong>
<dd>The first array.
<dt><i>in</i><strong> v2:</strong>
<dd>The second array.
<p>
</dl></dl>
<a name="friend_vrArray&amp;ltTYPE&gt;_operator-(const_vrArray&amp;ltTYPE&gt;&amp;_v1,_const_vrArray&amp;ltTYPE&gt;&amp;_v2)$"><ul><h3><li>friend vrArray&amp;ltTYPE&gt; operator-(const vrArray&amp;ltTYPE&gt;&amp; v1, const vrArray&amp;ltTYPE&gt;&amp; v2);</li></h3></a>
</ul>
</ul>     <dd>Componentwise subtraction of each item in both arrays.
<p>
<dl><dl>
<dt><i>in</i><strong> v1:</strong>
<dd>The first array.
<dt><i>in</i><strong> v2:</strong>
<dd>The second array.
<p>
</dl></dl>
<a name="friend_vrArray&amp;ltTYPE&gt;_operator*(const_vrArray&amp;ltTYPE&gt;&amp;_v,_SFFloat_f)$"><ul><h3><li>friend vrArray&amp;ltTYPE&gt; operator*(const vrArray&amp;ltTYPE&gt;&amp; v, SFFloat f);</li></h3></a>
</ul>
</ul>     <dd>Componentwise multiplication of each item the array by a scalar.
<p>
<dl><dl>
<dt><i>in</i><strong> v1:</strong>
<dd>The array.
<dt><i>in</i><strong> f:</strong>
<dd>The scalar.
<p>
</dl></dl>
<a name="friend_vrArray&amp;ltTYPE&gt;_operator$(const_vrArray&amp;ltTYPE&gt;&amp;_v,_SFFloat_f)$"><ul><h3><li>friend vrArray&amp;ltTYPE&gt; operator/(const vrArray&amp;ltTYPE&gt;&amp; v, SFFloat f);</li></h3></a>
</ul>
</ul>     <dd>Componentwise division of each item the array by a scalar.
<p>
<dl><dl>
<dt><i>in</i><strong> v1:</strong>
<dd>The array.
<dt><i>in</i><strong> f:</strong>
<dd>The scalar.
<p>
</dl></dl>
<a name="friend_SFBool_operator$$(const_vrArray&amp;ltTYPE&gt;&amp;_v1,_const_vrArray&amp;ltTYPE&gt;&amp;_v2)$"><ul><h3><li>friend SFBool operator==(const vrArray&amp;ltTYPE&gt;&amp; v1, const vrArray&amp;ltTYPE&gt;&amp; v2);</li></h3></a>
</ul>
</ul>     <dd>Returns TRUE if every element of 'array1' is the same as the corresponding element in 'array2'.
<p>
<dl><dl>
<dt><i>in</i><strong> v1:</strong>
<dd>The first array.
<dt><i>in</i><strong> v2:</strong>
<dd>The second array.
<p>
</dl></dl>
<a name="friend_SFBool_operator!$(const_vrArray&amp;ltTYPE&gt;&amp;_v1,_const_vrArray&amp;ltTYPE&gt;&amp;_v2)$"><ul><h3><li>friend SFBool operator!=(const vrArray&amp;ltTYPE&gt;&amp; v1, const vrArray&amp;ltTYPE&gt;&amp; v2);</li></h3></a>
</ul>
</ul>     <dd>Returns TRUE if any element in 'array1' is different from the corresponding element in 'array2'.
<p>
<dl><dl>
<dt><i>in</i><strong> v1:</strong>
<dd>The first array.
<dt><i>in</i><strong> v2:</strong>
<dd>The second array.
<p>
</dl></dl>
<a name="vrArray&amp;ltTYPE&gt;&amp;_operator$(const_vrArray&amp;ltTYPE&gt;&amp;_v1)$"><ul><h3><li>vrArray&amp;ltTYPE&gt;&amp; operator=(const vrArray&amp;ltTYPE&gt;&amp; v1);</li></h3></a>
</ul>
</ul>     <dd>Assignment operator.  Note: If the number of items in 'v1' is larger than this array, this array grows, if smaller then only that many items are assigned.
<p>
<dl><dl>
<dt><i>in</i><strong> v1:</strong>
<dd>The first array.
<dt><i>in</i><strong> v2:</strong>
<dd>The second array.
<p>
</dl></dl>
<a name="parents"><hr><p></p></a>
<h2><i>Ancestors</i></h2>
<ul>
Inheritance chain for vrArray:<p>
<ul>
<li><a href="vrArrayBase.htm">vrArrayBase</a>
</ul>
</ul>
<a name="children"><hr><p></p></a>
<h2><i>Descendants</i></h2>
<ul>
No descendants.<p>
</ul>
<hr><p></p>
Generated from source by the <i><a href="http://www.cs.umn.edu/~kotula/cocoon/cocoon.htm">Cocoon</a></i> utilities on Mon Feb 01 22:20:57 1999
.<p>
</body></html>
