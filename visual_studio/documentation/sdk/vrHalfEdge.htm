<html><head><title>vrHalfEdge Documentation</title></head>
<body BACKGROUND="sumtextb.jpg" BGCOLOR="#FFFFFF"><h1>
<a name="topofdoc"><img src="logo.gif" WIDTH="75" HEIGHT="75">vrHalfEdge</a></h1>
<dl>
<dd>
	The basis for connecting the various elements that make up
	a <a href="vrSolid.htm">vrSolid</a>.

</dl>
<hr><p></p>
<p><strong>[ 
<a href="../../Documentation/utility.htm">Utility</a> | <a href="../../Documentation/solids.htm">Solid</a> | <a href="../../Documentation/noderef.htm">VRML97</a> ]<br>[  
<a href="vrhalfedge.htm#aag">Summary</a> | </a>
<a href="vrhalfedge.htm#DESCRIPTION">Description</a> | 
<a href="vrhalfedge.htm#NOTES">Notes</a> | 
<a href="vrhalfedge.htm#EXAMPLE_CODE">Example Code</a> | 
<a href="vrhalfedge.htm#MEMBERS">Members</a> | 
<a href="vrhalfedge.htm#parents">Ancestors</a> | <a href="vrhalfedge.htm#children">Descendants</a>  ]</strong><p>
<a name="aag"><hr><p></p></a><h2><i>Summary</i></h2>
class <spc> vrHalfEdge :<br>
public vrIntrusiveListNode &lt; vrHalfEdge * &gt;<br>
<br>
 {
<br>
<table>
<tr><td align="left"><font size="+1"><i><b>public:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrHalfEdge.htm#vrHalfEdge_(const_vrHalfEdge&amp;_he)$">vrHalfEdge</a> (const vrHalfEdge&amp; he);</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrHalfEdge.htm#vrHalfEdge_(vrVertex_*v)$">vrHalfEdge</a> (<a href="vrVertex.htm">vrVertex</a> *v);</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrHalfEdge.htm#vrHalfEdge_(vrLoop_*l,_vrVertex_*v)$">vrHalfEdge</a> (<a href="vrLoop.htm">vrLoop</a> *l, <a href="vrVertex.htm">vrVertex</a> *v);</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrHalfEdge.htm#vrHalfEdge_(vrHalfEdge_*he)$">vrHalfEdge</a> (vrHalfEdge *he);</td></tr>
<tr><td align="right" valign="top"></td><td>~<a href="vrHalfEdge.htm#~vrHalfEdge_()$">vrHalfEdge</a> ();</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrHalfEdge.htm#void_SetVertex_(vrVertex_*v)$">SetVertex</a> (<a href="vrVertex.htm">vrVertex</a> *v);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrHalfEdge.htm#void_SetEdge_(vrEdge_*e)$">SetEdge</a> (<a href="vrEdge.htm">vrEdge</a> *e);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrHalfEdge.htm#void_SetLoop_(vrLoop_*l)$">SetLoop</a> (<a href="vrLoop.htm">vrLoop</a> *l);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrHalfEdge.htm#void_SetMark_(Uint32_m)$">SetMark</a> (Uint32 m);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrHalfEdge.htm#void_SetNext_(vrHalfEdge_*node)$">SetNext</a> (vrHalfEdge *node);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrHalfEdge.htm#void_SetPrev_(vrHalfEdge_*node)$">SetPrev</a> (vrHalfEdge *node);</td></tr>
<tr><td align="right" valign="top"><a href="vrVertex.htm">vrVertex</a> *</td><td><a href="vrHalfEdge.htm#vrVertex_*GetVertex_(void)_const$">GetVertex</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="vrEdge.htm">vrEdge</a> *</td><td><a href="vrHalfEdge.htm#vrEdge_*GetEdge_(void)_const$">GetEdge</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="vrLoop.htm">vrLoop</a> *</td><td><a href="vrHalfEdge.htm#vrLoop_*GetLoop_(void)_const$">GetLoop</a> (void) const;</td></tr>
<tr><td align="right" valign="top">Uint32 </td><td><a href="vrHalfEdge.htm#Uint32_GetMark_(void)_const$">GetMark</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrHalfEdge.htm#SFBool_Marked_(Uint32_m)_const$">Marked</a> (Uint32 m) const;</td></tr>
<tr><td align="right" valign="top"><a href="vrSolid.htm">vrSolid</a> *</td><td><a href="vrHalfEdge.htm#vrSolid_*GetSolid_(void)_const$">GetSolid</a> (void) const;</td></tr>
<tr><td align="right" valign="top">vrHalfEdge *</td><td><a href="vrHalfEdge.htm#vrHalfEdge_*GetMate_(void)_const$">GetMate</a> (void) const;</td></tr>
<tr><td align="right" valign="top">Uint32 </td><td><a href="vrHalfEdge.htm#Uint32_GetIndex_(void)_const$">GetIndex</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="vrFace.htm">vrFace</a> *</td><td><a href="vrHalfEdge.htm#vrFace_*GetFace_(void)_const$">GetFace</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="SFVec3f.htm">SFVec3f</a> </td><td><a href="vrHalfEdge.htm#SFVec3f_GetFaceNormal_(void)_const$">GetFaceNormal</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="vrFace.htm">vrFace</a> *</td><td><a href="vrHalfEdge.htm#vrFace_*GetMateFace_(void)_const$">GetMateFace</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="SFVec3f.htm">SFVec3f</a> </td><td><a href="vrHalfEdge.htm#SFVec3f_GetMateFaceNormal(void)_const$">GetMateFaceNormal</a>(void) const;</td></tr>
<tr><td align="right" valign="top">Uint32 </td><td><a href="vrHalfEdge.htm#Uint32_GetMateIndex_(void)_const$">GetMateIndex</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="vrVertex.htm">vrVertex</a> *</td><td><a href="vrHalfEdge.htm#vrVertex_*GetMateVertex_(void)_const$">GetMateVertex</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="vrLoop.htm">vrLoop</a> *</td><td><a href="vrHalfEdge.htm#vrLoop_*GetEdgeLoop_(SFBool_whichHe)_const$">GetEdgeLoop</a> (SFBool whichHe) const;</td></tr>
<tr><td align="right" valign="top">vrHalfEdge *</td><td><a href="vrHalfEdge.htm#vrHalfEdge_*GetEdgeHe_(SFBool_whichHe)_const$">GetEdgeHe</a> (SFBool whichHe) const;</td></tr>
<tr><td align="right" valign="top"><a href="SFVec3f.htm">SFVec3f</a> </td><td><a href="vrHalfEdge.htm#SFVec3f_GetNormal_(const_SFVec3f&amp;_def)_const$">GetNormal</a> (const <a href="SFVec3f.htm">SFVec3f</a>&amp; def) const;</td></tr>
<tr><td align="right" valign="top"><a href="SFColor.htm">SFColor</a> </td><td><a href="vrHalfEdge.htm#SFColor_GetColor_(const_SFColor&amp;_def)_const$">GetColor</a> (const <a href="SFColor.htm">SFColor</a>&amp; def) const;</td></tr>
<tr><td align="right" valign="top"><a href="SFVec2f.htm">SFVec2f</a> </td><td><a href="vrHalfEdge.htm#SFVec2f_GetTextureCoord_(const_SFVec2f&amp;_def)_const$">GetTextureCoord</a> (const <a href="SFVec2f.htm">SFVec2f</a>&amp; def) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrHalfEdge.htm#void_SetTexCoord_(const_SFVec2f&amp;_coord)$">SetTexCoord</a> (const <a href="SFVec2f.htm">SFVec2f</a>&amp; coord);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrHalfEdge.htm#void_SetColor_(const_SFColor&amp;_color)$">SetColor</a> (const <a href="SFColor.htm">SFColor</a>&amp; color);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrHalfEdge.htm#void_SetNormal_(const_SFVec3f&amp;_normal)$">SetNormal</a> (const <a href="SFVec3f.htm">SFVec3f</a>&amp; normal);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrHalfEdge.htm#SFBool_isNullEdge_(void)_const$">isNullEdge</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrHalfEdge.htm#SFBool_isNullStrut_(void)_const$">isNullStrut</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrHalfEdge.htm#SFBool_isMate_(vrHalfEdge_*he)_const$">isMate</a> (vrHalfEdge *he) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrHalfEdge.htm#SFBool_isNeighbor_(vrHalfEdge_*he)_const$">isNeighbor</a> (vrHalfEdge *he) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrHalfEdge.htm#SFBool_isWide_(SFBool_inc180)_const$">isWide</a> (SFBool inc180) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrHalfEdge.htm#SFBool_is180_(void)_const$">is180</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrHalfEdge.htm#SFBool_isConvexEdge_(void)_const$">isConvexEdge</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="SFVec3f.htm">SFVec3f</a> </td><td><a href="vrHalfEdge.htm#SFVec3f_Bisect_(void)_const$">Bisect</a> (void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrHalfEdge.htm#void_Show_(vrDumpContext&amp;_dc)_const$">Show</a> (<a href="vrDumpContext.htm">vrDumpContext</a>&amp; dc) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrHalfEdge.htm#void_Verify_(void)_const$">Verify</a> (void) const;</td></tr>
<tr><td align="left"><font size="+1"><i><b>protected:</b></i></font>
</td></tr>
</table>
}; <p>
<a name="DESCRIPTION"><hr><p></p></a><h2><i>Description</i></h2>
	<ul>
	vrHalfEdge objects point to <a href="vrEdge.htm">vrEdge</a> objects, <a href="vrLoop.htm">vrLoop</a>
	objects and <a href="vrVertex.htm">vrVertex</a> obects. This provides the ability to move
	from one data structure to another.
	</ul>
<p>
<a name="NOTES"><hr><p></p></a><h2><i>Notes</i></h2>
	<ul>
	<li>None.</li>
	</ul>
<p>
<a name="EXAMPLE_CODE"><hr><p></p></a><h2><i>Example Code</i></h2>
	<pre>
	// None.
	</pre>
<p>
<a name="MEMBERS"><hr><p></p></a><h2><i>Members</i></h2>
<a name="vrHalfEdge_(const_vrHalfEdge&amp;_he)$"><ul><h3><li>vrHalfEdge (const vrHalfEdge&amp; he);</li></h3></a>
</ul>
</ul>	   <dd>Copy Constructor.
<p>
<a name="vrHalfEdge_(vrVertex_*v)$"><ul><h3><li>vrHalfEdge (vrVertex *v);</li></h3></a>
</ul>
</ul>	   <dd>Constructor.
<p>
<dl><dl>
<dt><i>in</i><strong> v:</strong>
<dd>The vertex to which the halfedge points.
<p>
</dl></dl>
<a name="vrHalfEdge_(vrLoop_*l,_vrVertex_*v)$"><ul><h3><li>vrHalfEdge (vrLoop *l, vrVertex *v);</li></h3></a>
</ul>
</ul>	   <dd>Constructor.
<p>
<dl><dl>
<dt><i>in</i><strong> l:</strong>
<dd>The loop to which the halfedge belongs.
<dt><i>in</i><strong> v:</strong>
<dd>The vertex to which the halfedge points.
<p>
</dl></dl>
<a name="vrHalfEdge_(vrHalfEdge_*he)$"><ul><h3><li>vrHalfEdge (vrHalfEdge *he);</li></h3></a>
</ul>
</ul>	   <dd>Constructor.
<p>
<dl><dl>
<dt><i>in</i><strong> he:</strong>
<dd>A vrHalfEdge to copy from.
<p>
</dl></dl>
<a name="~vrHalfEdge_()$"><ul><h3><li>~vrHalfEdge ();</li></h3></a>
</ul>
</ul>	   <dd>Destructor.
<p>
<a name="void_SetVertex_(vrVertex_*v)$"><ul><h3><li>void SetVertex (vrVertex *v);</li></h3></a>
</ul>
</ul>	   <dd>Set the vertex to which this half edge points.
<p>
<dl><dl>
<dt><i>in</i><strong> v:</strong>
<dd>The vertex.
<p>
</dl></dl>
<a name="void_SetEdge_(vrEdge_*e)$"><ul><h3><li>void SetEdge (vrEdge *e);</li></h3></a>
</ul>
</ul>	   <dd>Set the edge to which this half edge points.
<p>
<dl><dl>
<dt><i>in</i><strong> e:</strong>
<dd>The edge.
<p>
</dl></dl>
<a name="void_SetLoop_(vrLoop_*l)$"><ul><h3><li>void SetLoop (vrLoop *l);</li></h3></a>
</ul>
</ul>	   <dd>Set the loop to which this half edge points.
<p>
<dl><dl>
<dt><i>in</i><strong> l:</strong>
<dd>The loop.
<p>
</dl></dl>
<a name="void_SetMark_(Uint32_m)$"><ul><h3><li>void SetMark (Uint32 m);</li></h3></a>
</ul>
</ul>	   <dd>Set the mark for this half edge.
<p>
<dl><dl>
<dt><i>in</i><strong> m:</strong>
<dd>The mark.
<p>
</dl></dl>
<a name="void_SetNext_(vrHalfEdge_*node)$"><ul><h3><li>void SetNext (vrHalfEdge *node);</li></h3></a>
</ul>
</ul>	   <dd>Set the next pointer of this half edge.
<p>
<dl><dl>
<dt><i>in</i><strong> node:</strong>
<dd>The next he.
<p>
</dl></dl>
<a name="void_SetPrev_(vrHalfEdge_*node)$"><ul><h3><li>void SetPrev (vrHalfEdge *node);</li></h3></a>
</ul>
</ul>	   <dd>Set the prev pointer of this half edge.
<p>
<dl><dl>
<dt><i>in</i><strong> node:</strong>
<dd>The prev he.
<p>
</dl></dl>
<a name="vrVertex_*GetVertex_(void)_const$"><ul><h3><li>vrVertex *GetVertex (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the vertex to which this half edge points.
<p>
<a name="vrEdge_*GetEdge_(void)_const$"><ul><h3><li>vrEdge *GetEdge (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the edge to which this half edge points.
<p>
<a name="vrLoop_*GetLoop_(void)_const$"><ul><h3><li>vrLoop *GetLoop (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the loop to which this half edge points.
<p>
<a name="Uint32_GetMark_(void)_const$"><ul><h3><li>Uint32 GetMark (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the mark for this halfedge.
<p>
<a name="SFBool_Marked_(Uint32_m)_const$"><ul><h3><li>SFBool Marked (Uint32 m) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns TRUE if this half edge is marked with 'm'.
<p>
<a name="vrSolid_*GetSolid_(void)_const$"><ul><h3><li>vrSolid *GetSolid (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns the solid to which this half edge belongs (wloop-&gt;face-&gt;solid).
<p>
<a name="vrHalfEdge_*GetMate_(void)_const$"><ul><h3><li>vrHalfEdge *GetMate (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the mate half edge (edge-&gt;he{1,2}).
<p>
<a name="Uint32_GetIndex_(void)_const$"><ul><h3><li>Uint32 GetIndex (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the index of this half edge's vertex (vertex-&gt;index).
<p>
<a name="vrFace_*GetFace_(void)_const$"><ul><h3><li>vrFace *GetFace (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the face to which this halfedge belongs (wloop-&gt;face).
<p>
<a name="SFVec3f_GetFaceNormal_(void)_const$"><ul><h3><li>SFVec3f GetFaceNormal (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the normal to the face to which this halfedge belongs (wloop-&gt;face-&gt;<a href="vrhalfedge.htm#SFVec3f_GetNormal_(const_SFVec3f&amp;_def)_const$">GetNormal</a>()).
<p>
<a name="vrFace_*GetMateFace_(void)_const$"><ul><h3><li>vrFace *GetMateFace (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the face to which this half edge's mate points (<a href="vrhalfedge.htm#vrHalfEdge_*GetMate_(void)_const$">GetMate</a>()-&gt;face).
<p>
<a name="SFVec3f_GetMateFaceNormal(void)_const$"><ul><h3><li>SFVec3f GetMateFaceNormal(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the normal to the face to which this half edge's mate points (<a href="vrhalfedge.htm#vrHalfEdge_*GetMate_(void)_const$">GetMate</a>()-&gt;face-&gt;<a href="vrhalfedge.htm#SFVec3f_GetNormal_(const_SFVec3f&amp;_def)_const$">GetNormal</a>()).
<p>
<a name="Uint32_GetMateIndex_(void)_const$"><ul><h3><li>Uint32 GetMateIndex (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the index to the mate's vertex (<a href="vrhalfedge.htm#vrHalfEdge_*GetMate_(void)_const$">GetMate</a>()-&gt;vertex-&gt;index).
<p>
<a name="vrVertex_*GetMateVertex_(void)_const$"><ul><h3><li>vrVertex *GetMateVertex (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the mate's vertex (<a href="vrhalfedge.htm#vrHalfEdge_*GetMate_(void)_const$">GetMate</a>()-&gt;vertex).
<p>
<a name="vrLoop_*GetEdgeLoop_(SFBool_whichHe)_const$"><ul><h3><li>vrLoop *GetEdgeLoop (SFBool whichHe) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the loop to which this edge points (edge-&gt;he{1,2}-&gt;wloop).
<p>
<dl><dl>
<dt><i>in</i><strong> whichHe:</strong>
<dd>0 = Left, 1 = Right
<p>
</dl></dl>
<a name="vrHalfEdge_*GetEdgeHe_(SFBool_whichHe)_const$"><ul><h3><li>vrHalfEdge *GetEdgeHe (SFBool whichHe) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the halfedge to which the edge points (edge-&gt;he{1,2}).
<p>
<dl><dl>
<dt><i>in</i><strong> whichHe:</strong>
<dd>0 = Left, 1 = Right
<p>
</dl></dl>
<a name="SFVec3f_GetNormal_(const_SFVec3f&amp;_def)_const$"><ul><h3><li>SFVec3f GetNormal (const SFVec3f&amp; def) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the normal for this halfedge.
<p>
<dl><dl>
<dt><i>in</i><strong> def:</strong>
<dd>The default normal if this halfedge has no normal.
<p>
</dl></dl>
<a name="SFColor_GetColor_(const_SFColor&amp;_def)_const$"><ul><h3><li>SFColor GetColor (const SFColor&amp; def) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the color for this halfedge.
<p>
<dl><dl>
<dt><i>in</i><strong> def:</strong>
<dd>The default color if this halfedge has no color.
<p>
</dl></dl>
<a name="SFVec2f_GetTextureCoord_(const_SFVec2f&amp;_def)_const$"><ul><h3><li>SFVec2f GetTextureCoord (const SFVec2f&amp; def) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the texture coord for this halfedge.
<p>
<dl><dl>
<dt><i>in</i><strong> def:</strong>
<dd>The default texture coord if this halfedge has no texture coord.
<p>
</dl></dl>
<a name="void_SetTexCoord_(const_SFVec2f&amp;_coord)$"><ul><h3><li>void SetTexCoord (const SFVec2f&amp; coord);</li></h3></a>
</ul>
</ul>	   <dd>Set the texture coord for this halfedge.
<p>
<dl><dl>
<dt><i>in</i><strong> decoord:</strong>
<dd>The coordinate.
<p>
</dl></dl>
<a name="void_SetColor_(const_SFColor&amp;_color)$"><ul><h3><li>void SetColor (const SFColor&amp; color);</li></h3></a>
</ul>
</ul>	   <dd>Set the color for this halfedge.
<p>
<dl><dl>
<dt><i>in</i><strong> color:</strong>
<dd>The color.
<p>
</dl></dl>
<a name="void_SetNormal_(const_SFVec3f&amp;_normal)$"><ul><h3><li>void SetNormal (const SFVec3f&amp; normal);</li></h3></a>
</ul>
</ul>	   <dd>Set the normal for this halfedge.
<p>
<dl><dl>
<dt><i>in</i><strong> normal:</strong>
<dd>The normal.
<p>
</dl></dl>
<a name="SFBool_isNullEdge_(void)_const$"><ul><h3><li>SFBool isNullEdge (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns TRUE if this halfedge is a null edge.
<p>
<a name="SFBool_isNullStrut_(void)_const$"><ul><h3><li>SFBool isNullStrut (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns TRUE if this halfedge is a null strut.
<p>
<a name="SFBool_isMate_(vrHalfEdge_*he)_const$"><ul><h3><li>SFBool isMate (vrHalfEdge *he) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns TRUE if the given halfedge is this half edge's mate.
<p>
<dl><dl>
<dt><i>in</i><strong> he:</strong>
<dd>The query half edge.
<p>
</dl></dl>
<a name="SFBool_isNeighbor_(vrHalfEdge_*he)_const$"><ul><h3><li>SFBool isNeighbor (vrHalfEdge *he) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns TRUE if the given halfedge is this half edge's neighbor.
<p>
<dl><dl>
<dt><i>in</i><strong> he:</strong>
<dd>The query half edge.
<p>
</dl></dl>
<a name="SFBool_isWide_(SFBool_inc180)_const$"><ul><h3><li>SFBool isWide (SFBool inc180) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns TRUE if this halfedge is Wide (i.e. forms an angle greater than 180 degrees with preceeding and following edges).
<p>
<dl><dl>
<dt><i>in</i><strong> inc180:</strong>
<dd>If TRUE includes exact 180 degrees in definition of Wide.
<p>
</dl></dl>
<a name="SFBool_is180_(void)_const$"><ul><h3><li>SFBool is180 (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns TRUE if this halfedge is exactly 180 degrees.
<p>
<a name="SFBool_isConvexEdge_(void)_const$"><ul><h3><li>SFBool isConvexEdge (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns TRUE if this halfedge is forms a convex angle with preceeding and following edges.
<p>
<a name="SFVec3f_Bisect_(void)_const$"><ul><h3><li>SFVec3f Bisect (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns the vector that bisects the angle formed by preceeding and following edges.
<p>
<a name="void_Show_(vrDumpContext&amp;_dc)_const$"><ul><h3><li>void Show (vrDumpContext&amp; dc) const;</li></h3></a>
</ul>
</ul>	   <dd>Debugging support.  Display the contents of the <a href="vrEdge.htm">vrEdge</a> to the dc.
<p>
<dl><dl>
<dt><i>in</i><strong> dc:</strong>
<dd>The <a href="vrDumpContext.htm">vrDumpContext</a> to which to dump this edge.
<p>
</dl></dl>
<a name="void_Verify_(void)_const$"><ul><h3><li>void Verify (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Debugging support.  Verify the edge.
<p>
<a name="parents"><hr><p></p></a>
<h2><i>Ancestors</i></h2>
<ul>
Inheritance chain for vrHalfEdge:<p>
<ul>
<li>vrIntrusiveListNode
</ul>
</ul>
<a name="children"><hr><p></p></a>
<h2><i>Descendants</i></h2>
<ul>
No descendants.<p>
</ul>
<hr><p></p>
Generated from source by the <i><a href="http://www.cs.umn.edu/~kotula/cocoon/cocoon.htm">Cocoon</a></i> utilities on Mon Feb 01 22:20:59 1999
.<p>
</body></html>
