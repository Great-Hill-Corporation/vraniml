<html><head><title>vrEdge Documentation</title></head>
<body BACKGROUND="sumtextb.jpg" BGCOLOR="#FFFFFF"><h1>
<a name="topofdoc"><img src="logo.gif" WIDTH="75" HEIGHT="75">vrEdge</a></h1>
<dl>
<dd>
	A connection between two verticies.

</dl>
<hr><p></p>
<p><strong>[ 
<a href="../../Documentation/utility.htm">Utility</a> | <a href="../../Documentation/solids.htm">Solid</a> | <a href="../../Documentation/noderef.htm">VRML97</a> ]<br>[  
<a href="vredge.htm#aag">Summary</a> | </a>
<a href="vredge.htm#DESCRIPTION">Description</a> | 
<a href="vredge.htm#NOTES">Notes</a> | 
<a href="vredge.htm#EXAMPLE_CODE">Example Code</a> | 
<a href="vredge.htm#MEMBERS">Members</a> | 
<a href="vredge.htm#parents">Ancestors</a> | <a href="vredge.htm#children">Descendants</a>  ]</strong><p>
<a name="aag"><hr><p></p></a><h2><i>Summary</i></h2>
class <spc> vrEdge :<br>
public vrIntrusiveListNode &lt; vrEdge * &gt;<br>
<br>
 {
<br>
<table>
<tr><td align="left"><font size="+1"><i><b>public:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrEdge.htm#vrEdge_(void)$">vrEdge</a> (void);</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrEdge.htm#vrEdge_(const_vrEdge&amp;_e)$">vrEdge</a> (const vrEdge&amp; e);</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrEdge.htm#vrEdge_(vrSolid_*s)$">vrEdge</a> (<a href="vrSolid.htm">vrSolid</a> *s);</td></tr>
<tr><td align="right" valign="top"></td><td>~<a href="vrEdge.htm#~vrEdge_()$">vrEdge</a> ();</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrEdge.htm#void_SwapHes_(void)$">SwapHes</a> (void);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrEdge.htm#void_SetHe_(SFBool_whichHe,_vrHalfEdge_*he)$">SetHe</a> (SFBool whichHe, <a href="vrHalfEdge.htm">vrHalfEdge</a> *he);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrEdge.htm#void_SetIndex_(Uint32_i)$">SetIndex</a> (Uint32 i);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrEdge.htm#void_SetMark_(Uint32_m)$">SetMark</a> (Uint32 m);</td></tr>
<tr><td align="right" valign="top"><a href="vrHalfEdge.htm">vrHalfEdge</a> *</td><td><a href="vrEdge.htm#vrHalfEdge_*GetHe_(SFBool_whichHe)_const$">GetHe</a> (SFBool whichHe) const;</td></tr>
<tr><td align="right" valign="top">Uint32 </td><td><a href="vrEdge.htm#Uint32_GetIndex_(void)_const$">GetIndex</a> (void) const;</td></tr>
<tr><td align="right" valign="top">Uint32 </td><td><a href="vrEdge.htm#Uint32_GetMark_(void)_const$">GetMark</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrEdge.htm#SFBool_Marked_(Uint32_m)_const$">Marked</a> (Uint32 m) const;</td></tr>
<tr><td align="right" valign="top"><a href="vrSolid.htm">vrSolid</a> *</td><td><a href="vrEdge.htm#vrSolid_*GetSolid_(void)_const$">GetSolid</a> (void) const;</td></tr>
<tr><td align="right" valign="top"><a href="vrLoop.htm">vrLoop</a> *</td><td><a href="vrEdge.htm#vrLoop_*GetLoop_(SFBool_whichHe)_const$">GetLoop</a> (SFBool whichHe) const;</td></tr>
<tr><td align="right" valign="top"><a href="vrVertex.htm">vrVertex</a> *</td><td><a href="vrEdge.htm#vrVertex_*GetVertex_(SFBool_whichHe)_const$">GetVertex</a> (SFBool whichHe) const;</td></tr>
<tr><td align="right" valign="top">Uint32 </td><td><a href="vrEdge.htm#Uint32_GetVertexIndex_(SFBool_whichHe)_const$">GetVertexIndex</a> (SFBool whichHe) const;</td></tr>
<tr><td align="right" valign="top"><a href="vrHalfEdge.htm">vrHalfEdge</a> *</td><td><a href="vrEdge.htm#vrHalfEdge_*AddHalfEdge_(vrVertex_*v,_vrHalfEdge_*where,_SFBool_sign)$">AddHalfEdge</a> (<a href="vrVertex.htm">vrVertex</a> *v, <a href="vrHalfEdge.htm">vrHalfEdge</a> *where, SFBool sign);</td></tr>
<tr><td align="right" valign="top"><a href="vrHalfEdge.htm">vrHalfEdge</a> *</td><td><a href="vrEdge.htm#vrHalfEdge_*DeleteHalfEdge_(vrHalfEdge_*he)$">DeleteHalfEdge</a> (<a href="vrHalfEdge.htm">vrHalfEdge</a> *he);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrEdge.htm#void_Show_(vrDumpContext&amp;_dc)_const$">Show</a> (<a href="vrDumpContext.htm">vrDumpContext</a>&amp; dc) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrEdge.htm#void_Verify_(void)_const$">Verify</a> (void) const;</td></tr>
<tr><td align="left"><font size="+1"><i><b>protected:</b></i></font>
</td></tr>
</table>
}; <p>
<a name="DESCRIPTION"><hr><p></p></a><h2><i>Description</i></h2>
	<ul>
	The edge node stores two <a href="vrHalfEdge.htm">vrHalfEdge</a> pointers.  One on the left
	and one on the right.  The <a href="vrHalfEdge.htm">vrHalfEdge</a> pointers store pointers
	to the <a href="vrVertex.htm">vrVertex</a> nodes.
	</ul>
<p>
<a name="NOTES"><hr><p></p></a><h2><i>Notes</i></h2>
	<ul>
	<li>The Solid Modeling library uses a data structure called the
	Half Edge.  More information about this data structure is available
	in the literature.</li>
	<li>This class has private operator= so you cannot assign it.</li>
	<li>You will probably not use this class directly.</li>
	</ul>
<p>
<a name="EXAMPLE_CODE"><hr><p></p></a><h2><i>Example Code</i></h2>
	<pre>
	// None.
	</pre>
<p>
<a name="MEMBERS"><hr><p></p></a><h2><i>Members</i></h2>
<a name="vrEdge_(void)$"><ul><h3><li>vrEdge (void);</li></h3></a>
</ul>
</ul>	   <dd>Constructor.
<p>
<a name="vrEdge_(const_vrEdge&amp;_e)$"><ul><h3><li>vrEdge (const vrEdge&amp; e);</li></h3></a>
</ul>
</ul>	   <dd>Copy Constructor.
<p>
<a name="vrEdge_(vrSolid_*s)$"><ul><h3><li>vrEdge (vrSolid *s);</li></h3></a>
</ul>
</ul>	   <dd>Constructor.
<p>
<dl><dl>
<dt><i>in</i><strong> s:</strong>
<dd>The solid to which this edge belongs.
<p>
</dl></dl>
<a name="~vrEdge_()$"><ul><h3><li>~vrEdge ();</li></h3></a>
</ul>
</ul>	   <dd>Destructor.
<p>
<a name="void_SwapHes_(void)$"><ul><h3><li>void SwapHes (void);</li></h3></a>
</ul>
</ul>	   <dd>Swap the edge's half-edges (effectivly reversing the edge).
<p>
<a name="void_SetHe_(SFBool_whichHe,_vrHalfEdge_*he)$"><ul><h3><li>void SetHe (SFBool whichHe, vrHalfEdge *he);</li></h3></a>
</ul>
</ul>	   <dd>Set a halfedge.
<p>
<dl><dl>
<dt><i>in</i><strong> whichHe:</strong>
<dd>0 = Left, 1 = Right.
<dt><i>in</i><strong> he:</strong>
<dd>The halfedge pointer.
<p>
</dl></dl>
<a name="void_SetIndex_(Uint32_i)$"><ul><h3><li>void SetIndex (Uint32 i);</li></h3></a>
</ul>
</ul>	   <dd>Set the edge's index.
<p>
<dl><dl>
<dt><i>in</i><strong> i:</strong>
<dd>The index.
<p>
</dl></dl>
<a name="void_SetMark_(Uint32_m)$"><ul><h3><li>void SetMark (Uint32 m);</li></h3></a>
</ul>
</ul>	   <dd>Set the edge's mark.
<p>
<dl><dl>
<dt><i>in</i><strong> m:</strong>
<dd>The mark.
<p>
</dl></dl>
<a name="vrHalfEdge_*GetHe_(SFBool_whichHe)_const$"><ul><h3><li>vrHalfEdge *GetHe (SFBool whichHe) const;</li></h3></a>
</ul>
</ul>	   <dd>Return one of the edge's halfedges.
<p>
<dl><dl>
<dt><i>in</i><strong> whichHe:</strong>
<dd>0 = Left, 1 = Right.
<p>
</dl></dl>
<a name="Uint32_GetIndex_(void)_const$"><ul><h3><li>Uint32 GetIndex (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the edge's index.
<p>
<a name="Uint32_GetMark_(void)_const$"><ul><h3><li>Uint32 GetMark (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the edge's mark.
<p>
<a name="SFBool_Marked_(Uint32_m)_const$"><ul><h3><li>SFBool Marked (Uint32 m) const;</li></h3></a>
</ul>
</ul>	   <dd>Return TRUE if this edge is marked with 'm'.
<p>
<dl><dl>
<dt><i>in</i><strong> m:</strong>
<dd>The mark to check.
<p>
</dl></dl>
<a name="vrSolid_*GetSolid_(void)_const$"><ul><h3><li>vrSolid *GetSolid (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the <a href="vrSolid.htm">vrSolid</a> to which this edge belongs. (he{1,2}-&gt;wloop-&gt;face-&gt;solid)
<p>
<a name="vrLoop_*GetLoop_(SFBool_whichHe)_const$"><ul><h3><li>vrLoop *GetLoop (SFBool whichHe) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the <a href="vrLoop.htm">vrLoop</a> to which this edge belongs. (he{1,2}-&gt;wloop)
<p>
<a name="vrVertex_*GetVertex_(SFBool_whichHe)_const$"><ul><h3><li>vrVertex *GetVertex (SFBool whichHe) const;</li></h3></a>
</ul>
</ul>	   <dd>Return one of the <a href="vrVertex.htm">vrVertex</a> to which this edge points. (he{1,2}-&gt;vertex)
<p>
<dl><dl>
<dt><i>in</i><strong> whichHe:</strong>
<dd>0 = Left, 1 = Right.
<p>
</dl></dl>
<a name="Uint32_GetVertexIndex_(SFBool_whichHe)_const$"><ul><h3><li>Uint32 GetVertexIndex (SFBool whichHe) const;</li></h3></a>
</ul>
</ul>	   <dd>Return one of the indicies of the one of the <a href="vrVertex.htm">vrVertex</a> to which this edge points. (he{1,2}-&gt;vertex-&gt;index)
<p>
<dl><dl>
<dt><i>in</i><strong> whichHe:</strong>
<dd>0 = Left, 1 = Right.
<p>
</dl></dl>
<a name="vrHalfEdge_*AddHalfEdge_(vrVertex_*v,_vrHalfEdge_*where,_SFBool_sign)$"><ul><h3><li>vrHalfEdge *AddHalfEdge (vrVertex *v, vrHalfEdge *where, SFBool sign);</li></h3></a>
</ul>
</ul>	   <dd>Add a half edge to this edge.
<p>
<dl><dl>
<dt><i>in</i><strong> v:</strong>
<dd>The vertex to which the halfedge points.
<dt><i>in</i><strong> where:</strong>
<dd>The halfedge to add.
<dt><i>in</i><strong> sign:</strong>
<dd>0 = Left, 1 = Right.
<p>
</dl></dl>
<a name="vrHalfEdge_*DeleteHalfEdge_(vrHalfEdge_*he)$"><ul><h3><li>vrHalfEdge *DeleteHalfEdge (vrHalfEdge *he);</li></h3></a>
</ul>
</ul>	   <dd>Delete a half edge.
<p>
<dl><dl>
<dt><i>in</i><strong> he:</strong>
<dd>The half edge to delete.
<p>
</dl></dl>
<a name="void_Show_(vrDumpContext&amp;_dc)_const$"><ul><h3><li>void Show (vrDumpContext&amp; dc) const;</li></h3></a>
</ul>
</ul>	   <dd>Debugging support.  Display the contents of the vrEdge to the dc.
<p>
<dl><dl>
<dt><i>in</i><strong> dc:</strong>
<dd>The <a href="vrDumpContext.htm">vrDumpContext</a> to which to dump this edge.
<p>
</dl></dl>
<a name="void_Verify_(void)_const$"><ul><h3><li>void Verify (void) const;</li></h3></a>
</ul>
</ul>	   <dd>Debugging support.  Verify the edge.
<p>
<a name="parents"><hr><p></p></a>
<h2><i>Ancestors</i></h2>
<ul>
Inheritance chain for vrEdge:<p>
<ul>
<li>vrIntrusiveListNode
</ul>
</ul>
<a name="children"><hr><p></p></a>
<h2><i>Descendants</i></h2>
<ul>
No descendants.<p>
</ul>
<hr><p></p>
Generated from source by the <i><a href="http://www.cs.umn.edu/~kotula/cocoon/cocoon.htm">Cocoon</a></i> utilities on Mon Feb 01 22:20:58 1999
.<p>
</body></html>
