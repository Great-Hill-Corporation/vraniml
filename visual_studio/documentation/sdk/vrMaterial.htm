<html><head><title>vrMaterial Documentation</title></head>
<body BACKGROUND="sumtextb.jpg" BGCOLOR="#FFFFFF"><h1>
<a name="topofdoc"><img src="logo.gif" WIDTH="75" HEIGHT="75">vrMaterial</a></h1>
<dl>
<dd>
	This class corresponds to the Material node in VRML.  
	<a href="../spec/part1/nodesRef.html#Material">Further information</a> 
	about this class is available in any VRML related documentation.

</dl>
<hr><p></p>
<p><strong>[ 
<a href="../../Documentation/utility.htm">Utility</a> | <a href="../../Documentation/solids.htm">Solid</a> | <a href="../../Documentation/noderef.htm">VRML97</a> ]<br>[  
<a href="vrmaterial.htm#aag">Summary</a> | </a>
<a href="vrmaterial.htm#DESCRIPTION">Description</a> | 
<a href="vrmaterial.htm#NOTES">Notes</a> | 
<a href="vrmaterial.htm#EXAMPLE_CODE">Example Code</a> | 
<a href="vrmaterial.htm#MEMBERS">Members</a> | 
<a href="vrmaterial.htm#parents">Ancestors</a> | <a href="vrmaterial.htm#children">Descendants</a>  ]</strong><p>
<a name="aag"><hr><p></p></a><h2><i>Summary</i></h2>
class <spc> vrMaterial : public <a href="vrNode.htm">vrNode</a><br>
<br>
 {
<br>
<table>
<tr><td align="left"><font size="+1"><i><b>public:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrMaterial.htm#vrMaterial(void)$">vrMaterial</a>(void);</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrMaterial.htm#vrMaterial(const_vrMaterial&amp;_v)$">vrMaterial</a>(const vrMaterial&amp; v);</td></tr>
<tr><td align="right" valign="top"></td><td>~<i><a href="vrMaterial.htm#~vrMaterial(void)$">vrMaterial</a></i>(void);</td></tr>
<tr><td align="right" valign="top">vrMaterial&amp; </td><td><a href="vrMaterial.htm#vrMaterial&amp;_operator$(const_vrMaterial&amp;_v)$">operator=</a>(const vrMaterial&amp; v);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFNode">SFNode </a> </td><td><i><a href="vrMaterial.htm#SFNode_Clone(void)_const$">Clone</a></i>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrMaterial.htm#void_SetAmbientIntensity(SFFloat_ambientintensity)$">SetAmbientIntensity</a>(SFFloat ambientintensity);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrMaterial.htm#void_SetDiffuseColor(const_SFColor&amp;_diffusecolor)$">SetDiffuseColor</a>(const <a href="SFColor.htm">SFColor</a>&amp; diffusecolor);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrMaterial.htm#void_SetEmissiveColor(const_SFColor&amp;_emissivecolor)$">SetEmissiveColor</a>(const <a href="SFColor.htm">SFColor</a>&amp; emissivecolor);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrMaterial.htm#void_SetShininess(SFFloat_shininess)$">SetShininess</a>(SFFloat shininess);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrMaterial.htm#void_SetSpecularColor(const_SFColor&amp;_specularcolor)$">SetSpecularColor</a>(const <a href="SFColor.htm">SFColor</a>&amp; specularcolor);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrMaterial.htm#void_SetTransparency(SFFloat_transparency)$">SetTransparency</a>(SFFloat transparency);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFFloat">SFFloat </a> </td><td><a href="vrMaterial.htm#SFFloat_GetAmbientIntensity(void)_const$">GetAmbientIntensity</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="SFColor.htm">SFColor</a> </td><td><a href="vrMaterial.htm#SFColor_GetDiffuseColor(void)_const$">GetDiffuseColor</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="SFColor.htm">SFColor</a> </td><td><a href="vrMaterial.htm#SFColor_GetEmissiveColor(void)_const$">GetEmissiveColor</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFFloat">SFFloat </a> </td><td><a href="vrMaterial.htm#SFFloat_GetShininess(void)_const$">GetShininess</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="SFColor.htm">SFColor</a> </td><td><a href="vrMaterial.htm#SFColor_GetSpecularColor(void)_const$">GetSpecularColor</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFFloat">SFFloat </a> </td><td><a href="vrMaterial.htm#SFFloat_GetTransparency(void)_const$">GetTransparency</a>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrMaterial.htm#void_Traverse(vrTraverser_*trav)_const$">Traverse</a></i>(<a href="vrTraverser.htm">vrTraverser</a> *trav) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrMaterial.htm#void_ReceiveEventIn(vrEvent_*event)$">ReceiveEventIn</a></i>(<a href="vrEvent.htm">vrEvent</a> *event);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><i><a href="vrMaterial.htm#SFBool_IsDefault(const_SFString&amp;_fieldName_,_vrField_*field_)_const$">IsDefault</a></i>(const <a href="SFString.htm">SFString</a>&amp; fieldName , <a href="vrField.htm">vrField</a> *field ) const;</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrMaterial.htm#DECLARE_NODE(vrMaterial)$">DECLARE_NODE</a>(vrMaterial);</td></tr>
<tr><td align="left"><font size="+1"><i><b>protected:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFFloat">SFFloat </a> </td><td><a href="vrMaterial.htm#SFFloat_m_AmbientIntensity$">m_AmbientIntensity</a>;</td></tr>
<tr><td align="right" valign="top"><a href="SFColor.htm">SFColor</a> </td><td><a href="vrMaterial.htm#SFColor_m_DiffuseColor$">m_DiffuseColor</a>;</td></tr>
<tr><td align="right" valign="top"><a href="SFColor.htm">SFColor</a> </td><td><a href="vrMaterial.htm#SFColor_m_EmissiveColor$">m_EmissiveColor</a>;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFFloat">SFFloat </a> </td><td><a href="vrMaterial.htm#SFFloat_m_Shininess$">m_Shininess</a>;</td></tr>
<tr><td align="right" valign="top"><a href="SFColor.htm">SFColor</a> </td><td><a href="vrMaterial.htm#SFColor_m_SpecularColor$">m_SpecularColor</a>;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFFloat">SFFloat </a> </td><td><a href="vrMaterial.htm#SFFloat_m_Transparency$">m_Transparency</a>;</td></tr>
</table>
}; <p>
<a name="DESCRIPTION"><hr><p></p></a><h2><i>Description</i></h2>
	<ul>This node corresponds to the Material node as defined in the VRML97 
	specification.  Like all Node Classes this class is better described in the 
	<a href="../spec/index.html">VRML97 Specification</a>.  In particular, at this 
	<a href="../spec/part1/nodesRef.html#Material">link</a>.</ul>
<p>
<a name="NOTES"><hr><p></p></a><h2><i>Notes</i></h2>
	<ul>
	<li>All node classes share certain aspects which are described <a href="../nodespec.htm">here</a>.</li>
	</ul>
<p>
<a name="EXAMPLE_CODE"><hr><p></p></a><h2><i>Example Code</i></h2>
	<pre>
	// None.
	</pre>
<p>
<a name="MEMBERS"><hr><p></p></a><h2><i>Members</i></h2>
<a name="SFFloat_m_AmbientIntensity$"><ul><h3><li>SFFloat m_AmbientIntensity;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'ambientIntensity' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> 0.2</strong>
<p>
</dl></dl>
<a name="SFColor_m_DiffuseColor$"><ul><h3><li>SFColor m_DiffuseColor;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'diffuseColor' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> White*0.8</strong>
<p>
</dl></dl>
<a name="SFColor_m_EmissiveColor$"><ul><h3><li>SFColor m_EmissiveColor;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'emissiveColor' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> Black</strong>
<p>
</dl></dl>
<a name="SFFloat_m_Shininess$"><ul><h3><li>SFFloat m_Shininess;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'shininess' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> 0.2</strong>
<p>
</dl></dl>
<a name="SFColor_m_SpecularColor$"><ul><h3><li>SFColor m_SpecularColor;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'specularColor' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> Black</strong>
<p>
</dl></dl>
<a name="SFFloat_m_Transparency$"><ul><h3><li>SFFloat m_Transparency;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'transparency' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> 0.0</strong>
<p>
</dl></dl>
<a name="vrMaterial(void)$"><ul><h3><li>vrMaterial(void);</li></h3></a>
</ul>
</ul>	   <dd>Default constructor.
<p>
<a name="vrMaterial(const_vrMaterial&amp;_v)$"><ul><h3><li>vrMaterial(const vrMaterial&amp; v);</li></h3></a>
</ul>
</ul>	   <dd>Copy constructor.
<p>
<a name="~vrMaterial(void)$"><ul><h3><li>~vrMaterial(void);</li></h3></a>
</ul>
</ul>	   <dd>Destructor.
<p>
<a name="vrMaterial&amp;_operator$(const_vrMaterial&amp;_v)$"><ul><h3><li>vrMaterial&amp; operator=(const vrMaterial&amp; v);</li></h3></a>
</ul>
</ul>	   <dd>Equals operator.
<p>
<a name="SFNode_Clone(void)_const$"><ul><h3><li>SFNode Clone(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns an exact copy of the given node.
<p>
<a name="void_SetAmbientIntensity(SFFloat_ambientintensity)$"><ul><h3><li>void SetAmbientIntensity(SFFloat ambientintensity);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_AmbientIntensity member.
<p>
<dl><dl>
<dt><i>in</i><strong> ambientintensity:</strong>
<dd>The ambientintensity value.
<p>
</dl></dl>
<a name="void_SetDiffuseColor(const_SFColor&amp;_diffusecolor)$"><ul><h3><li>void SetDiffuseColor(const SFColor&amp; diffusecolor);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_DiffuseColor member.
<p>
<dl><dl>
<dt><i>in</i><strong> diffusecolor:</strong>
<dd>The diffusecolor value.
<p>
</dl></dl>
<a name="void_SetEmissiveColor(const_SFColor&amp;_emissivecolor)$"><ul><h3><li>void SetEmissiveColor(const SFColor&amp; emissivecolor);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_EmissiveColor member.
<p>
<dl><dl>
<dt><i>in</i><strong> emissivecolor:</strong>
<dd>The emissivecolor value.
<p>
</dl></dl>
<a name="void_SetShininess(SFFloat_shininess)$"><ul><h3><li>void SetShininess(SFFloat shininess);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_Shininess member.
<p>
<dl><dl>
<dt><i>in</i><strong> shininess:</strong>
<dd>The shininess value.
<p>
</dl></dl>
<a name="void_SetSpecularColor(const_SFColor&amp;_specularcolor)$"><ul><h3><li>void SetSpecularColor(const SFColor&amp; specularcolor);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_SpecularColor member.
<p>
<dl><dl>
<dt><i>in</i><strong> specularcolor:</strong>
<dd>The specularcolor value.
<p>
</dl></dl>
<a name="void_SetTransparency(SFFloat_transparency)$"><ul><h3><li>void SetTransparency(SFFloat transparency);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_Transparency member.
<p>
<dl><dl>
<dt><i>in</i><strong> transparency:</strong>
<dd>The transparency value.
<p>
</dl></dl>
<a name="SFFloat_GetAmbientIntensity(void)_const$"><ul><h3><li>SFFloat GetAmbientIntensity(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_AmbientIntensity member.
<p>
<a name="SFColor_GetDiffuseColor(void)_const$"><ul><h3><li>SFColor GetDiffuseColor(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_DiffuseColor member.
<p>
<a name="SFColor_GetEmissiveColor(void)_const$"><ul><h3><li>SFColor GetEmissiveColor(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_EmissiveColor member.
<p>
<a name="SFFloat_GetShininess(void)_const$"><ul><h3><li>SFFloat GetShininess(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_Shininess member.
<p>
<a name="SFColor_GetSpecularColor(void)_const$"><ul><h3><li>SFColor GetSpecularColor(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_SpecularColor member.
<p>
<a name="SFFloat_GetTransparency(void)_const$"><ul><h3><li>SFFloat GetTransparency(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_Transparency member.
<p>
<a name="void_Traverse(vrTraverser_*trav)_const$"><ul><h3><li>void Traverse(vrTraverser *trav) const;</li></h3></a>
</ul>
</ul>	   <dd>Respond to a traversal by an arbitrary traverser.  Note: Normally, nodes just call t-&gt;<a href="vrmaterial.htm#void_Traverse(vrTraverser_*trav)_const$">Traverse</a>(this)
	   <dd>to have the traverser handle the traversal.  you may override this method in your derived class to
	   <dd>handle traversals of node types.
<p>
<dl><dl>
<dt><i>in</i><strong> trav:</strong>
<dd>The <a href="vrTraverser.htm">vrTraverser</a> requesting the traversal.
<p>
</dl></dl>
<a name="void_ReceiveEventIn(vrEvent_*event)$"><ul><h3><li>void ReceiveEventIn(vrEvent *event);</li></h3></a>
</ul>
</ul>	   <dd>Receive an event during an event cascade or directly from caller.
<p>
<dl><dl>
<dt><i>in</i><strong> event:</strong>
<dd>The <a href="vrEvent.htm">vrEvent</a> to be processed.
<p>
</dl></dl>
<a name="SFBool_IsDefault(const_SFString&amp;_fieldName_,_vrField_*field_)_const$"><ul><h3><li>SFBool IsDefault(const SFString&amp; fieldName , vrField *field ) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns TRUE if the node (or a particular field) is in it's default state.
<p>
<dl><dl>
<dt><i>in</i><strong> fieldName:</strong>
<dd>The field to check for default value.  NULL implies check all fields of this node.
<dt><i>out</i><strong> field:</strong>
<dd>If non-NULL the value of the field will be returned in field.
<p>
</dl></dl>
<a name="DECLARE_NODE(vrMaterial)$"><ul><h3><li>DECLARE_NODE(vrMaterial);</li></h3></a>
</ul>
</ul>	   <dd>Declare that this node may be runtime typed and dynamically created. [ <a href="../../Documentation/define.htm#DECLARE_NODE">DECLARE_NODE</a> ]
<p>
<a name="parents"><hr><p></p></a>
<h2><i>Ancestors</i></h2>
<ul>
Inheritance chain for vrMaterial:<p>
<ul>
<li><a href="vrBaseNode.htm">vrBaseNode</a>
<li><a href="vrNode.htm">vrNode</a>
</ul>
</ul>
<a name="children"><hr><p></p></a>
<h2><i>Descendants</i></h2>
<ul>
No descendants.<p>
</ul>
<hr><p></p>
Generated from source by the <i><a href="http://www.cs.umn.edu/~kotula/cocoon/cocoon.htm">Cocoon</a></i> utilities on Mon Feb 01 22:21:00 1999
.<p>
</body></html>
