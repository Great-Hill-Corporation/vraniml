<html><head><title>vrSensor Documentation</title></head>
<body BACKGROUND="sumtextb.jpg" BGCOLOR="#FFFFFF"><h1>
<a name="topofdoc"><img src="logo.gif" WIDTH="75" HEIGHT="75">vrSensor</a></h1>
<dl>
<dd>
	This class corresponds to the Sensor node in VRML.  
	<a href="../spec/part1/nodesRef.html#Sensor">Further information</a> 
	about this class is available in any VRML related documentation.

</dl>
<hr><p></p>
<p><strong>[ 
<a href="../../Documentation/utility.htm">Utility</a> | <a href="../../Documentation/solids.htm">Solid</a> | <a href="../../Documentation/noderef.htm">VRML97</a> ]<br>[  
<a href="vrsensor.htm#aag">Summary</a> | </a>
<a href="vrsensor.htm#DESCRIPTION">Description</a> | 
<a href="vrsensor.htm#NOTES">Notes</a> | 
<a href="vrsensor.htm#EXAMPLE_CODE">Example Code</a> | 
<a href="vrsensor.htm#MEMBERS">Members</a> | 
<a href="vrsensor.htm#parents">Ancestors</a> | <a href="vrsensor.htm#children">Descendants</a>  ]</strong><p>
<a name="aag"><hr><p></p></a><h2><i>Summary</i></h2>
class <spc> vrSensor : public <a href="vrNode.htm">vrNode</a><br>
<br>
 {
<br>
<table>
<tr><td align="left"><font size="+1"><i><b>public:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrSensor.htm#vrSensor(void)$">vrSensor</a>(void);</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrSensor.htm#vrSensor(const_vrSensor&amp;_v)$">vrSensor</a>(const vrSensor&amp; v);</td></tr>
<tr><td align="right" valign="top"></td><td>~<i><a href="vrSensor.htm#~vrSensor(void)$">vrSensor</a></i>(void);</td></tr>
<tr><td align="right" valign="top">vrSensor&amp; </td><td><a href="vrSensor.htm#vrSensor&amp;_operator$(const_vrSensor&amp;_v)$">operator=</a>(const vrSensor&amp; v);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFNode">SFNode </a> </td><td><i><a href="vrSensor.htm#SFNode_Clone(void)_const$">Clone</a></i>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrSensor.htm#void_SetEnabled(SFBool_enabled)$">SetEnabled</a>(SFBool enabled);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrSensor.htm#SFBool_GetEnabled(void)_const$">GetEnabled</a>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrSensor.htm#void_SetIsActive(SFBool_isactive)$">SetIsActive</a>(SFBool isactive);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrSensor.htm#SFBool_IsActive(void)_const$">IsActive</a>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrSensor.htm#void_Traverse(vrTraverser_*trav)_const$">Traverse</a></i>(<a href="vrTraverser.htm">vrTraverser</a> *trav) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrSensor.htm#void_ReceiveEventIn(vrEvent_*event)$">ReceiveEventIn</a></i>(<a href="vrEvent.htm">vrEvent</a> *event);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><i><a href="vrSensor.htm#SFBool_IsDefault(const_SFString&amp;_fieldName_,_vrField_*field_)_const$">IsDefault</a></i>(const <a href="SFString.htm">SFString</a>&amp; fieldName , <a href="vrField.htm">vrField</a> *field ) const;</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrSensor.htm#DECLARE_NODE(vrSensor)$">DECLARE_NODE</a>(vrSensor);</td></tr>
<tr><td align="left"><font size="+1"><i><b>protected:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrSensor.htm#SFBool_m_Enabled$">m_Enabled</a>;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><a href="vrSensor.htm#SFBool_m_IsActive$">m_IsActive</a>;</td></tr>
</table>
}; <p>
<a name="DESCRIPTION"><hr><p></p></a><h2><i>Description</i></h2>
	<ul>This node corresponds to the Sensor node as defined in the VRML97 
	specification.  Like all Node Classes this class is better described in the 
	<a href="../spec/index.html">VRML97 Specification</a>.  In particular, at this 
	<a href="../spec/part1/nodesRef.html#Sensor">link</a>.</ul>
<p>
<a name="NOTES"><hr><p></p></a><h2><i>Notes</i></h2>
	<ul>
	<li>All node classes share certain aspects which are described <a href="../nodespec.htm">here</a>.</li>
	</ul>
<p>
<a name="EXAMPLE_CODE"><hr><p></p></a><h2><i>Example Code</i></h2>
	<pre>
	// None.
	</pre>
<p>
<a name="MEMBERS"><hr><p></p></a><h2><i>Members</i></h2>
<a name="SFBool_m_Enabled$"><ul><h3><li>SFBool m_Enabled;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'enabled' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> TRUE</strong>
<p>
</dl></dl>
<a name="SFBool_m_IsActive$"><ul><h3><li>SFBool m_IsActive;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'isActive' eventOut.
<p>
<dl><dl>
<dt><i>default</i><strong> FALSE</strong>
<p>
</dl></dl>
<a name="vrSensor(void)$"><ul><h3><li>vrSensor(void);</li></h3></a>
</ul>
</ul>	   <dd>Default constructor.
<p>
<a name="vrSensor(const_vrSensor&amp;_v)$"><ul><h3><li>vrSensor(const vrSensor&amp; v);</li></h3></a>
</ul>
</ul>	   <dd>Copy constructor.
<p>
<a name="~vrSensor(void)$"><ul><h3><li>~vrSensor(void);</li></h3></a>
</ul>
</ul>	   <dd>Destructor.
<p>
<a name="vrSensor&amp;_operator$(const_vrSensor&amp;_v)$"><ul><h3><li>vrSensor&amp; operator=(const vrSensor&amp; v);</li></h3></a>
</ul>
</ul>	   <dd>Equals operator.
<p>
<a name="SFNode_Clone(void)_const$"><ul><h3><li>SFNode Clone(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns an exact copy of the given node.
<p>
<a name="void_SetEnabled(SFBool_enabled)$"><ul><h3><li>void SetEnabled(SFBool enabled);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_Enabled member.
<p>
<dl><dl>
<dt><i>in</i><strong> enabled:</strong>
<dd>The enabled value.
<p>
</dl></dl>
<a name="SFBool_GetEnabled(void)_const$"><ul><h3><li>SFBool GetEnabled(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_Enabled member.
<p>
<a name="void_SetIsActive(SFBool_isactive)$"><ul><h3><li>void SetIsActive(SFBool isactive);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_IsActive member.
<p>
<dl><dl>
<dt><i>in</i><strong> isactive:</strong>
<dd>The isactive value.
<p>
</dl></dl>
<a name="SFBool_IsActive(void)_const$"><ul><h3><li>SFBool IsActive(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_IsActive member.
<p>
<a name="void_Traverse(vrTraverser_*trav)_const$"><ul><h3><li>void Traverse(vrTraverser *trav) const;</li></h3></a>
</ul>
</ul>	   <dd>Respond to a traversal by an arbitrary traverser.  Note: Normally, nodes just call t-&gt;<a href="vrsensor.htm#void_Traverse(vrTraverser_*trav)_const$">Traverse</a>(this)
	   <dd>to have the traverser handle the traversal.  you may override this method in your derived class to
	   <dd>handle traversals of node types.
<p>
<dl><dl>
<dt><i>in</i><strong> trav:</strong>
<dd>The <a href="vrTraverser.htm">vrTraverser</a> requesting the traversal.
<p>
</dl></dl>
<a name="void_ReceiveEventIn(vrEvent_*event)$"><ul><h3><li>void ReceiveEventIn(vrEvent *event);</li></h3></a>
</ul>
</ul>	   <dd>Receive an event during an event cascade or directly from caller.
<p>
<dl><dl>
<dt><i>in</i><strong> event:</strong>
<dd>The <a href="vrEvent.htm">vrEvent</a> to be processed.
<p>
</dl></dl>
<a name="SFBool_IsDefault(const_SFString&amp;_fieldName_,_vrField_*field_)_const$"><ul><h3><li>SFBool IsDefault(const SFString&amp; fieldName , vrField *field ) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns TRUE if the node (or a particular field) is in it's default state.
<p>
<dl><dl>
<dt><i>in</i><strong> fieldName:</strong>
<dd>The field to check for default value.  NULL implies check all fields of this node.
<dt><i>out</i><strong> field:</strong>
<dd>If non-NULL the value of the field will be returned in field.
<p>
</dl></dl>
<a name="DECLARE_NODE(vrSensor)$"><ul><h3><li>DECLARE_NODE(vrSensor);</li></h3></a>
</ul>
</ul>	   <dd>Declare that this node may be runtime typed. [ <a href="../../Documentation/define.htm#DECLARE_NODE">DECLARE_NODE</a> ]
<p>
<a name="parents"><hr><p></p></a>
<h2><i>Ancestors</i></h2>
<ul>
Inheritance chain for vrSensor:<p>
<ul>
<li><a href="vrBaseNode.htm">vrBaseNode</a>
<li><a href="vrNode.htm">vrNode</a>
</ul>
</ul>
<a name="children"><hr><p></p></a>
<h2><i>Descendants</i></h2>
<ul>
<ul>
<li><a href="vrPointingDeviceSensor.htm">vrPointingDeviceSensor</a>
<ul>
<li><a href="vrCylinderSensor.htm">vrCylinderSensor</a>
<li><a href="vrPlaneSensor.htm">vrPlaneSensor</a>
<li><a href="vrSphereSensor.htm">vrSphereSensor</a>
<li><a href="vrTouchSensor.htm">vrTouchSensor</a>
</ul>
<li><a href="vrProximitySensor.htm">vrProximitySensor</a>
<li><a href="vrTimeSensor.htm">vrTimeSensor</a>
<li><a href="vrVisibilitySensor.htm">vrVisibilitySensor</a>
</ul>
</ul>
<hr><p></p>
Generated from source by the <i><a href="http://www.cs.umn.edu/~kotula/cocoon/cocoon.htm">Cocoon</a></i> utilities on Mon Feb 01 22:20:54 1999
.<p>
</body></html>
