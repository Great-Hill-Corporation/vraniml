<html><head><title>vrColorInterpolator Documentation</title></head>
<body BACKGROUND="sumtextb.jpg" BGCOLOR="#FFFFFF"><h1>
<a name="topofdoc"><img src="logo.gif" WIDTH="75" HEIGHT="75">vrColorInterpolator</a></h1>
<dl>
<dd>
	This class corresponds to the ColorInterpolator node in VRML.  
	<a href="../spec/part1/nodesRef.html#ColorInterpolator">Further information</a> 
	about this class is available in any VRML related documentation.

</dl>
<hr><p></p>
<p><strong>[ 
<a href="../../Documentation/utility.htm">Utility</a> | <a href="../../Documentation/solids.htm">Solid</a> | <a href="../../Documentation/noderef.htm">VRML97</a> ]<br>[  
<a href="vrcolorinterpolator.htm#aag">Summary</a> | </a>
<a href="vrcolorinterpolator.htm#DESCRIPTION">Description</a> | 
<a href="vrcolorinterpolator.htm#NOTES">Notes</a> | 
<a href="vrcolorinterpolator.htm#EXAMPLE_CODE">Example Code</a> | 
<a href="vrcolorinterpolator.htm#MEMBERS">Members</a> | 
<a href="vrcolorinterpolator.htm#parents">Ancestors</a> | <a href="vrcolorinterpolator.htm#children">Descendants</a>  ]</strong><p>
<a name="aag"><hr><p></p></a><h2><i>Summary</i></h2>
class <spc> vrColorInterpolator : public <a href="vrInterpolator.htm">vrInterpolator</a><br>
<br>
 {
<br>
<table>
<tr><td align="left"><font size="+1"><i><b>public:</b></i></font>
</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrColorInterpolator.htm#vrColorInterpolator(void)$">vrColorInterpolator</a>(void);</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrColorInterpolator.htm#vrColorInterpolator(const_vrColorInterpolator&amp;_v)$">vrColorInterpolator</a>(const vrColorInterpolator&amp; v);</td></tr>
<tr><td align="right" valign="top"></td><td>~<i><a href="vrColorInterpolator.htm#~vrColorInterpolator(void)$">vrColorInterpolator</a></i>(void);</td></tr>
<tr><td align="right" valign="top">vrColorInterpolator&amp; </td><td><a href="vrColorInterpolator.htm#vrColorInterpolator&amp;_operator$(const_vrColorInterpolator&amp;_v)$">operator=</a>(const vrColorInterpolator&amp; v);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFNode">SFNode </a> </td><td><i><a href="vrColorInterpolator.htm#SFNode_Clone(void)_const$">Clone</a></i>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrColorInterpolator.htm#void_AddKeyValue(const_SFColor&amp;_keyvalue)$">AddKeyValue</a>(const <a href="SFColor.htm">SFColor</a>&amp; keyvalue);</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrColorInterpolator.htm#void_SetKeyValue(const_MFColor&amp;_keyvalue)$">SetKeyValue</a>(const MFColor&amp; keyvalue);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFInt32">SFInt32 </a> </td><td><a href="vrColorInterpolator.htm#SFInt32_GetNKeyValues(void)_const$">GetNKeyValues</a>(void) const;</td></tr>
<tr><td align="right" valign="top"><a href="SFColor.htm">SFColor</a> </td><td><a href="vrColorInterpolator.htm#SFColor_GetKeyValue(SFInt32_n)_const$">GetKeyValue</a>(SFInt32 n) const;</td></tr>
<tr><td align="right" valign="top">const MFColor&amp; </td><td><a href="vrColorInterpolator.htm#const_MFColor&amp;_GetKeyValueArray(void)_const$">GetKeyValueArray</a>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><a href="vrColorInterpolator.htm#void_SetValue(const_SFColor&amp;_value)$">SetValue</a>(const <a href="SFColor.htm">SFColor</a>&amp; value);</td></tr>
<tr><td align="right" valign="top"><a href="SFColor.htm">SFColor</a> </td><td><a href="vrColorInterpolator.htm#SFColor_GetValue(void)_const$">GetValue</a>(void) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrColorInterpolator.htm#void_Traverse(vrTraverser_*trav)_const$">Traverse</a></i>(<a href="vrTraverser.htm">vrTraverser</a> *trav) const;</td></tr>
<tr><td align="right" valign="top">void </td><td><i><a href="vrColorInterpolator.htm#void_ReceiveEventIn(vrEvent_*event)$">ReceiveEventIn</a></i>(<a href="vrEvent.htm">vrEvent</a> *event);</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFBool">SFBool </a> </td><td><i><a href="vrColorInterpolator.htm#SFBool_IsDefault(const_SFString&amp;_fieldName_,_vrField_*field_)_const$">IsDefault</a></i>(const <a href="SFString.htm">SFString</a>&amp; fieldName , <a href="vrField.htm">vrField</a> *field ) const;</td></tr>
<tr><td align="right" valign="top"></td><td><a href="vrColorInterpolator.htm#DECLARE_NODE(vrColorInterpolator)$">DECLARE_NODE</a>(vrColorInterpolator);</td></tr>
<tr><td align="left"><font size="+1"><i><b>protected:</b></i></font>
</td></tr>
<tr><td align="right" valign="top">MFColor </td><td><a href="vrColorInterpolator.htm#MFColor_m_KeyValue$">m_KeyValue</a>;</td></tr>
<tr><td align="right" valign="top"><a href="SFColor.htm">SFColor</a> </td><td><a href="vrColorInterpolator.htm#SFColor_m_Value$">m_Value</a>;</td></tr>
<tr><td align="right" valign="top"><a href="../types.htm#SFFloat">SFFloat </a> </td><td><a href="vrColorInterpolator.htm#SFFloat_m_Fraction$">m_Fraction</a>;</td></tr>
</table>
}; <p>
<a name="DESCRIPTION"><hr><p></p></a><h2><i>Description</i></h2>
	<ul>This node corresponds to the ColorInterpolator node as defined in the VRML97 
	specification.  Like all Node Classes this class is better described in the 
	<a href="../spec/index.html">VRML97 Specification</a>.  In particular, at this 
	<a href="../spec/part1/nodesRef.html#ColorInterpolator">link</a>.</ul>
<p>
<a name="NOTES"><hr><p></p></a><h2><i>Notes</i></h2>
	<ul>
	<li>All node classes share certain aspects which are described <a href="../nodespec.htm">here</a>.</li>
	</ul>
<p>
<a name="EXAMPLE_CODE"><hr><p></p></a><h2><i>Example Code</i></h2>
	<pre>
	// None.
	</pre>
<p>
<a name="MEMBERS"><hr><p></p></a><h2><i>Members</i></h2>
<a name="MFColor_m_KeyValue$"><ul><h3><li>MFColor m_KeyValue;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'keyValue' exposedField.
<p>
<dl><dl>
<dt><i>default</i><strong> []</strong>
<p>
</dl></dl>
<a name="SFColor_m_Value$"><ul><h3><li>SFColor m_Value;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'value' eventOut.
<p>
<dl><dl>
<dt><i>default</i><strong> origin</strong>
<p>
</dl></dl>
<a name="SFFloat_m_Fraction$"><ul><h3><li>SFFloat m_Fraction;</li></h3></a>
</ul>
</ul>	  <dd>Corresponds to the 'fraction' eventIn.
<p>
<dl><dl>
<dt><i>default</i><strong> 0.0</strong>
<p>
</dl></dl>
<a name="vrColorInterpolator(void)$"><ul><h3><li>vrColorInterpolator(void);</li></h3></a>
</ul>
</ul>	   <dd>Default constructor.
<p>
<a name="vrColorInterpolator(const_vrColorInterpolator&amp;_v)$"><ul><h3><li>vrColorInterpolator(const vrColorInterpolator&amp; v);</li></h3></a>
</ul>
</ul>	   <dd>Copy constructor.
<p>
<a name="~vrColorInterpolator(void)$"><ul><h3><li>~vrColorInterpolator(void);</li></h3></a>
</ul>
</ul>	   <dd>Destructor.
<p>
<a name="vrColorInterpolator&amp;_operator$(const_vrColorInterpolator&amp;_v)$"><ul><h3><li>vrColorInterpolator&amp; operator=(const vrColorInterpolator&amp; v);</li></h3></a>
</ul>
</ul>	   <dd>Equals operator.
<p>
<a name="SFNode_Clone(void)_const$"><ul><h3><li>SFNode Clone(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns an exact copy of the given node.
<p>
<a name="void_AddKeyValue(const_SFColor&amp;_keyvalue)$"><ul><h3><li>void AddKeyValue(const SFColor&amp; keyvalue);</li></h3></a>
</ul>
</ul>	   <dd>Add an item to the m_KeyValue array (grow if needed).
<p>
<dl><dl>
<dt><i>in</i><strong> keyvalue:</strong>
<dd>The value to add to the m_KeyValue array.
<p>
</dl></dl>
<a name="void_SetKeyValue(const_MFColor&amp;_keyvalue)$"><ul><h3><li>void SetKeyValue(const MFColor&amp; keyvalue);</li></h3></a>
</ul>
</ul>	   <dd>Replace the values of the m_KeyValue member (copies values).
<p>
<dl><dl>
<dt><i>in</i><strong> keyvalue:</strong>
<dd>The m_KeyValue array.
<p>
</dl></dl>
<a name="SFInt32_GetNKeyValues(void)_const$"><ul><h3><li>SFInt32 GetNKeyValues(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the number of values in the m_KeyValue member.
<p>
<a name="SFColor_GetKeyValue(SFInt32_n)_const$"><ul><h3><li>SFColor GetKeyValue(SFInt32 n) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the nth value in the m_KeyValue member.
<p>
<dl><dl>
<dt><i>in</i><strong> n:</strong>
<dd>The index into the array.
<p>
</dl></dl>
<a name="const_MFColor&amp;_GetKeyValueArray(void)_const$"><ul><h3><li>const MFColor&amp; GetKeyValueArray(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the m_KeyValue member.
<p>
<a name="void_SetValue(const_SFColor&amp;_value)$"><ul><h3><li>void SetValue(const SFColor&amp; value);</li></h3></a>
</ul>
</ul>	   <dd>Set the value of the m_Value member.
<p>
<dl><dl>
<dt><i>in</i><strong> value:</strong>
<dd>The value value.
<p>
</dl></dl>
<a name="SFColor_GetValue(void)_const$"><ul><h3><li>SFColor GetValue(void) const;</li></h3></a>
</ul>
</ul>	   <dd>Return the value of the m_Value member.
<p>
<a name="void_Traverse(vrTraverser_*trav)_const$"><ul><h3><li>void Traverse(vrTraverser *trav) const;</li></h3></a>
</ul>
</ul>	   <dd>Respond to a traversal by an arbitrary traverser.  Note: Normally, nodes just call t-&gt;<a href="vrcolorinterpolator.htm#void_Traverse(vrTraverser_*trav)_const$">Traverse</a>(this)
	   <dd>to have the traverser handle the traversal.  you may override this method in your derived class to
	   <dd>handle traversals of node types.
<p>
<dl><dl>
<dt><i>in</i><strong> trav:</strong>
<dd>The <a href="vrTraverser.htm">vrTraverser</a> requesting the traversal.
<p>
</dl></dl>
<a name="void_ReceiveEventIn(vrEvent_*event)$"><ul><h3><li>void ReceiveEventIn(vrEvent *event);</li></h3></a>
</ul>
</ul>	   <dd>Receive an event during an event cascade or directly from caller.
<p>
<dl><dl>
<dt><i>in</i><strong> event:</strong>
<dd>The <a href="vrEvent.htm">vrEvent</a> to be processed.
<p>
</dl></dl>
<a name="SFBool_IsDefault(const_SFString&amp;_fieldName_,_vrField_*field_)_const$"><ul><h3><li>SFBool IsDefault(const SFString&amp; fieldName , vrField *field ) const;</li></h3></a>
</ul>
</ul>	   <dd>Returns TRUE if the node (or a particular field) is in it's default state.
<p>
<dl><dl>
<dt><i>in</i><strong> fieldName:</strong>
<dd>The field to check for default value.  NULL implies check all fields of this node.
<dt><i>out</i><strong> field:</strong>
<dd>If non-NULL the value of the field will be returned in field.
<p>
</dl></dl>
<a name="DECLARE_NODE(vrColorInterpolator)$"><ul><h3><li>DECLARE_NODE(vrColorInterpolator);</li></h3></a>
</ul>
</ul>	   <dd>Declare that this node may be runtime typed and dynamically created. [ <a href="../../Documentation/define.htm#DECLARE_NODE">DECLARE_NODE</a> ]
<p>
<a name="parents"><hr><p></p></a>
<h2><i>Ancestors</i></h2>
<ul>
Inheritance chain for vrColorInterpolator:<p>
<ul>
<li><a href="vrBaseNode.htm">vrBaseNode</a>
<li><a href="vrNode.htm">vrNode</a>
<li><a href="vrInterpolator.htm">vrInterpolator</a>
</ul>
</ul>
<a name="children"><hr><p></p></a>
<h2><i>Descendants</i></h2>
<ul>
No descendants.<p>
</ul>
<hr><p></p>
Generated from source by the <i><a href="http://www.cs.umn.edu/~kotula/cocoon/cocoon.htm">Cocoon</a></i> utilities on Mon Feb 01 22:20:50 1999
.<p>
</body></html>
